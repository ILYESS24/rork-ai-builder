[{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\jest.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const nextJest = require('next/jest')\r\n\r\nconst createJestConfig = nextJest({\r\n  // Provide the path to your Next.js app to load next.config.js and .env files\r\n  dir: './',\r\n})\r\n\r\n// Add any custom config to be passed to Jest\r\nconst customJestConfig = {\r\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\r\n  testEnvironment: 'jest-environment-jsdom',\r\n  testMatch: [\r\n    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',\r\n    '<rootDir>/src/**/*.{test,spec}.{js,jsx,ts,tsx}',\r\n  ],\r\n  collectCoverageFrom: [\r\n    'src/**/*.{js,jsx,ts,tsx}',\r\n    '!src/**/*.d.ts',\r\n    '!src/**/*.stories.{js,jsx,ts,tsx}',\r\n    '!src/**/__tests__/**',\r\n    '!src/**/node_modules/**',\r\n  ],\r\n  coverageDirectory: 'coverage',\r\n  coverageReporters: ['text', 'lcov', 'html'],\r\n  coverageThreshold: {\r\n    global: {\r\n      branches: 70,\r\n      functions: 70,\r\n      lines: 70,\r\n      statements: 70,\r\n    },\r\n  },\r\n  moduleNameMapping: {\r\n    '^@/(.*)$': '<rootDir>/src/$1',\r\n  },\r\n  testTimeout: 30000, // 30 secondes pour les tests de fuzzing\r\n  verbose: true,\r\n  // Configuration pour les tests de fuzzing\r\n  testEnvironmentOptions: {\r\n    url: 'http://localhost:3000',\r\n  },\r\n  // Ignorer certains patterns\r\n  testPathIgnorePatterns: [\r\n    '<rootDir>/.next/',\r\n    '<rootDir>/node_modules/',\r\n    '<rootDir>/build/',\r\n    '<rootDir>/dist/',\r\n  ],\r\n}\r\n\r\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\r\nmodule.exports = createJestConfig(customJestConfig)","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\sentry.client.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\sentry.edge.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\sentry.server.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\__tests__\\fuzzing.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":35,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3020,3023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3020,3023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4203,4206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4203,4206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":140,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5641,5644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5641,5644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'token' is defined but never used.","line":199,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6789,6792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6789,6792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7880,7883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7880,7883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9209,9212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9209,9212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10553,10556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10553,10556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11689,11692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11689,11692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Tests de Fuzzing pour Rork AI Builder\r\n * Utilise fast-check (équivalent QuickCheck pour TypeScript)\r\n */\r\n\r\nimport fc from 'fast-check'\r\nimport { describe, it, expect } from '@jest/globals'\r\n\r\n// Configuration fast-check\r\nconst ARBITRARY_CONFIG = {\r\n  numRuns: 100, // Nombre de tests à exécuter\r\n  timeout: 10000, // Timeout en ms\r\n}\r\n\r\ndescribe('🧪 Tests de Fuzzing - Rork AI Builder', () => {\r\n  \r\n  describe('🔐 Tests de sécurité des inputs utilisateur', () => {\r\n    \r\n    it('doit gérer tous les types de prompts sans crash', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.string({ \r\n            minLength: 1, \r\n            maxLength: 10000,\r\n          }),\r\n          (prompt) => {\r\n            // Test que la fonction de validation ne crash pas\r\n            const isValidPrompt = (input: string): boolean => {\r\n              try {\r\n                // Simulation de la validation des prompts\r\n                return input.length > 0 && \r\n                       input.length <= 10000 && \r\n                       !input.includes('<script>') &&\r\n                       !input.includes('javascript:')\r\n              } catch (error) {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = isValidPrompt(prompt)\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit valider les emails dans tous les formats', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.emailAddress(),\r\n          (email) => {\r\n            const isValidEmail = (email: string): boolean => {\r\n              const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n              return emailRegex.test(email)\r\n            }\r\n            \r\n            expect(isValidEmail(email)).toBe(true)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit gérer les URLs malformées sans erreur', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.webUrl({ withFragments: true, withQueryParameters: true }),\r\n          (url) => {\r\n            const isValidUrl = (url: string): boolean => {\r\n              try {\r\n                new URL(url)\r\n                return true\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            expect(typeof isValidUrl(url)).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('📊 Tests de génération de code', () => {\r\n    \r\n    it('doit générer du code valide pour tous les types de prompts', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            prompt: fc.string({ minLength: 10, maxLength: 500 }),\r\n            language: fc.constantFrom('javascript', 'typescript', 'python', 'html', 'css'),\r\n            framework: fc.constantFrom('react', 'nextjs', 'vue', 'angular', 'svelte'),\r\n          }),\r\n          ({ prompt, language, framework }) => {\r\n            const generateCode = (input: any): string => {\r\n              // Simulation de la génération de code\r\n              const template = `\r\n// Code généré pour: ${input.prompt}\r\n// Langage: ${input.language}\r\n// Framework: ${input.framework}\r\n\r\nfunction generatedFunction() {\r\n  return \"Code généré avec succès\"\r\n}\r\n\r\nexport default generatedFunction\r\n              `\r\n              return template.trim()\r\n            }\r\n            \r\n            const result = generateCode({ prompt, language, framework })\r\n            expect(result).toContain('Code généré pour:')\r\n            expect(result).toContain(language)\r\n            expect(result).toContain(framework)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit gérer les templates complexes sans erreur', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            name: fc.string({ minLength: 1, maxLength: 50 }),\r\n            variables: fc.array(fc.string({ minLength: 1, maxLength: 20 }), { minLength: 0, maxLength: 10 }),\r\n            template: fc.string({ minLength: 10, maxLength: 1000 }),\r\n          }),\r\n          ({ name, variables, template }) => {\r\n            const processTemplate = (input: any): string => {\r\n              let result = input.template\r\n              input.variables.forEach((variable: string, index: number) => {\r\n                try {\r\n                  // Échapper les caractères spéciaux regex\r\n                  const escapedVariable = variable.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\r\n                  result = result.replace(new RegExp(`\\\\{${escapedVariable}\\\\}`, 'g'), `value_${index}`)\r\n                } catch (error) {\r\n                  // En cas d'erreur regex, utiliser replace simple\r\n                  result = result.replace(`{${variable}}`, `value_${index}`)\r\n                }\r\n              })\r\n              return result\r\n            }\r\n            \r\n            const result = processTemplate({ name, variables, template })\r\n            expect(typeof result).toBe('string')\r\n            expect(result.length).toBeGreaterThan(0)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('🔌 Tests des API et intégrations', () => {\r\n    \r\n    it('doit gérer les réponses API de toutes tailles', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            status: fc.integer({ min: 200, max: 599 }),\r\n            data: fc.string({ minLength: 0, maxLength: 50000 }),\r\n            headers: fc.dictionary(fc.string(), fc.string()),\r\n          }),\r\n          ({ status, data, headers }) => {\r\n            const processApiResponse = (response: any): boolean => {\r\n              try {\r\n                // Simulation du traitement des réponses API\r\n                const isSuccess = response.status >= 200 && response.status < 300\r\n                const hasData = response.data && response.data.length > 0\r\n                const hasHeaders = Object.keys(response.headers).length > 0\r\n                \r\n                return isSuccess === hasData && hasHeaders\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = processApiResponse({ status, data, headers })\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit valider les tokens JWT de toutes formes', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            header: fc.string({ minLength: 10, maxLength: 100 }),\r\n            payload: fc.string({ minLength: 10, maxLength: 500 }),\r\n            signature: fc.string({ minLength: 10, maxLength: 100 }),\r\n          }),\r\n          ({ header, payload, signature }) => {\r\n            const validateJWT = (token: any): boolean => {\r\n              try {\r\n                // Simulation de la validation JWT\r\n                const tokenString = `${header}.${payload}.${signature}`\r\n                return tokenString.split('.').length === 3\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = validateJWT({ header, payload, signature })\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('💾 Tests de base de données', () => {\r\n    \r\n    it('doit gérer les requêtes SQL complexes', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            table: fc.string({ minLength: 1, maxLength: 50 }),\r\n            columns: fc.array(fc.string({ minLength: 1, maxLength: 30 }), { minLength: 1, maxLength: 10 }),\r\n            conditions: fc.array(fc.string({ minLength: 5, maxLength: 100 }), { minLength: 0, maxLength: 5 }),\r\n          }),\r\n          ({ table, columns, conditions }) => {\r\n            const buildQuery = (input: any): string => {\r\n              try {\r\n                const selectClause = `SELECT ${input.columns.join(', ')}`\r\n                const fromClause = `FROM ${input.table}`\r\n                const whereClause = input.conditions.length > 0 \r\n                  ? `WHERE ${input.conditions.join(' AND ')}` \r\n                  : ''\r\n                \r\n                return `${selectClause} ${fromClause} ${whereClause}`.trim()\r\n              } catch {\r\n                return 'SELECT * FROM error'\r\n              }\r\n            }\r\n            \r\n            const result = buildQuery({ table, columns, conditions })\r\n            expect(result).toContain('SELECT')\r\n            expect(result).toContain('FROM')\r\n            expect(typeof result).toBe('string')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit valider les données utilisateur avant insertion', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            email: fc.emailAddress(),\r\n            name: fc.string({ minLength: 1, maxLength: 100 }),\r\n            age: fc.integer({ min: 0, max: 150 }),\r\n            metadata: fc.dictionary(fc.string(), fc.oneof(fc.string(), fc.integer(), fc.boolean())),\r\n          }),\r\n          ({ email, name, age, metadata }) => {\r\n            const validateUserData = (userData: any): boolean => {\r\n              try {\r\n                const emailValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(userData.email)\r\n                const nameValid = userData.name && userData.name.length > 0\r\n                const ageValid = userData.age >= 0 && userData.age <= 150\r\n                const metadataValid = typeof userData.metadata === 'object'\r\n                \r\n                return emailValid && nameValid && ageValid && metadataValid\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = validateUserData({ email, name, age, metadata })\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('🎨 Tests de rendu UI', () => {\r\n    \r\n    it('doit gérer tous les types de props React', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            title: fc.string({ minLength: 0, maxLength: 100 }),\r\n            count: fc.integer({ min: -1000, max: 10000 }),\r\n            isActive: fc.boolean(),\r\n            items: fc.array(fc.string(), { minLength: 0, maxLength: 50 }),\r\n            style: fc.dictionary(fc.string(), fc.string()),\r\n          }),\r\n          ({ title, count, isActive, items, style }) => {\r\n            const validateProps = (props: any): boolean => {\r\n              try {\r\n                return typeof props.title === 'string' &&\r\n                       typeof props.count === 'number' &&\r\n                       typeof props.isActive === 'boolean' &&\r\n                       Array.isArray(props.items) &&\r\n                       typeof props.style === 'object'\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = validateProps({ title, count, isActive, items, style })\r\n            expect(result).toBe(true)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit gérer les événements utilisateur complexes', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            type: fc.constantFrom('click', 'submit', 'change', 'focus', 'blur'),\r\n            target: fc.string({ minLength: 1, maxLength: 50 }),\r\n            data: fc.dictionary(fc.string(), fc.string()),\r\n            timestamp: fc.integer({ min: 0, max: Date.now() }),\r\n          }),\r\n          ({ type, target, data, timestamp }) => {\r\n            const processEvent = (event: any): boolean => {\r\n              try {\r\n                const validTypes = ['click', 'submit', 'change', 'focus', 'blur']\r\n                return validTypes.includes(event.type) &&\r\n                       typeof event.target === 'string' &&\r\n                       typeof event.data === 'object' &&\r\n                       typeof event.timestamp === 'number'\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = processEvent({ type, target, data, timestamp })\r\n            expect(result).toBe(true)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('🚀 Tests de performance', () => {\r\n    \r\n    it('doit gérer les opérations de grande envergure', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.integer({ min: 1, max: 10000 }),\r\n          (size) => {\r\n            const processLargeOperation = (dataSize: number): boolean => {\r\n              try {\r\n                // Simulation d'une opération coûteuse\r\n                const data = new Array(dataSize).fill(0).map((_, i) => i)\r\n                const processed = data.map(x => x * 2).filter(x => x > 100)\r\n                return processed.length <= dataSize\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = processLargeOperation(size)\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        { numRuns: 50, timeout: 5000 } // Moins de runs pour les tests de performance\r\n      )\r\n    })\r\n  })\r\n})\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\api\\generate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\api\\health\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":59,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2298,2493],"text":"\n              Plateforme complète de création d&apos;applications IA avec génération de code, \n              collaboration temps réel, et outils avancés pour développeurs et entreprises.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2298,2493],"text":"\n              Plateforme complète de création d&lsquo;applications IA avec génération de code, \n              collaboration temps réel, et outils avancés pour développeurs et entreprises.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2298,2493],"text":"\n              Plateforme complète de création d&#39;applications IA avec génération de code, \n              collaboration temps réel, et outils avancés pour développeurs et entreprises.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2298,2493],"text":"\n              Plateforme complète de création d&rsquo;applications IA avec génération de code, \n              collaboration temps réel, et outils avancés pour développeurs et entreprises.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":144,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5616,5708],"text":"\n              Rejoignez des milliers de développeurs qui créent déjà avec l&apos;IA\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5616,5708],"text":"\n              Rejoignez des milliers de développeurs qui créent déjà avec l&lsquo;IA\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5616,5708],"text":"\n              Rejoignez des milliers de développeurs qui créent déjà avec l&#39;IA\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5616,5708],"text":"\n              Rejoignez des milliers de développeurs qui créent déjà avec l&rsquo;IA\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useUser } from '@clerk/nextjs'\nimport { SignInButton, UserButton } from '@clerk/nextjs'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport AdvancedCodeGenerator from '@/components/generation/AdvancedCodeGenerator'\nimport AdvancedDashboard from '@/components/dashboard/AdvancedDashboard'\nimport { \n  Sparkles, \n  Code, \n  BarChart3, \n  Zap, \n  Users, \n  Globe,\n  Database,\n  Shield,\n  Rocket\n} from 'lucide-react'\n\nexport default function HomePage() {\n  const { isSignedIn, user } = useUser()\n\n  if (!isSignedIn) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800\">\n        {/* Header */}\n        <header className=\"border-b bg-white/80 backdrop-blur-sm\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center space-x-2\">\n                <Sparkles className=\"h-8 w-8 text-blue-600\" />\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  Rork AI Builder\n                </h1>\n                <Badge variant=\"secondary\" className=\"ml-2\">Enterprise Edition</Badge>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <SignInButton mode=\"modal\">\n                  <Button variant=\"outline\">Se connecter</Button>\n                </SignInButton>\n                <SignInButton mode=\"modal\">\n                  <Button>Commencer</Button>\n                </SignInButton>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Hero Section */}\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl font-bold text-gray-900 mb-6\">\n              Créez des applications IA en quelques clics\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n              Plateforme complète de création d'applications IA avec génération de code, \n              collaboration temps réel, et outils avancés pour développeurs et entreprises.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <SignInButton mode=\"modal\">\n                <Button size=\"lg\" className=\"flex items-center space-x-2\">\n                  <Rocket className=\"h-5 w-5\" />\n                  <span>Commencer gratuitement</span>\n                </Button>\n              </SignInButton>\n              <Button variant=\"outline\" size=\"lg\">\n                Voir la démo\n              </Button>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n            <Card>\n              <CardHeader>\n                <Code className=\"h-10 w-10 text-blue-600 mb-4\" />\n                <CardTitle>Génération de Code IA</CardTitle>\n                <CardDescription>\n                  Créez des applications complètes avec des prompts en langage naturel\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Users className=\"h-10 w-10 text-green-600 mb-4\" />\n                <CardTitle>Collaboration Temps Réel</CardTitle>\n                <CardDescription>\n                  Travaillez en équipe avec synchronisation en temps réel\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <BarChart3 className=\"h-10 w-10 text-purple-600 mb-4\" />\n                <CardTitle>Analytics Avancées</CardTitle>\n                <CardDescription>\n                  Suivez les performances et optimisez vos applications\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Database className=\"h-10 w-10 text-orange-600 mb-4\" />\n                <CardTitle>Multi-Provider IA</CardTitle>\n                <CardDescription>\n                  OpenAI, Anthropic, Mistral, Google Gemini et plus\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Shield className=\"h-10 w-10 text-red-600 mb-4\" />\n                <CardTitle>Sécurité Enterprise</CardTitle>\n                <CardDescription>\n                  Authentification, paiements, monitoring intégrés\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <Globe className=\"h-10 w-10 text-teal-600 mb-4\" />\n                <CardTitle>Déploiement Global</CardTitle>\n                <CardDescription>\n                  Déployez sur Vercel, Render, AWS en un clic\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n\n          {/* CTA Section */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white text-center\">\n            <h2 className=\"text-3xl font-bold mb-4\">\n              Prêt à révolutionner votre développement ?\n            </h2>\n            <p className=\"text-xl mb-6 opacity-90\">\n              Rejoignez des milliers de développeurs qui créent déjà avec l'IA\n            </p>\n            <SignInButton mode=\"modal\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"bg-white text-blue-600 hover:bg-gray-100\">\n                Commencer maintenant\n              </Button>\n            </SignInButton>\n          </div>\n        </main>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"border-b bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Sparkles className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                Rork AI Builder\n              </h1>\n              <Badge variant=\"secondary\">Enterprise Edition</Badge>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\">\n                Bienvenue, {user?.firstName || user?.emailAddresses[0]?.emailAddress} !\n              </span>\n              <UserButton />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Dashboard Rork AI Builder\n          </h1>\n          <p className=\"text-gray-600\">\n            Créez, collaborez et déployez des applications IA en quelques minutes\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"generator\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"generator\" className=\"flex items-center space-x-2\">\n              <Zap className=\"h-4 w-4\" />\n              <span>Générateur IA</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"dashboard\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              <span>Dashboard</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"generator\" className=\"space-y-6\">\n            <AdvancedCodeGenerator />\n          </TabsContent>\n\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            <AdvancedDashboard />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\sign-in\\[[...sign-in]]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\sign-up\\[[...sign-up]]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\CodePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\admin\\AdminPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Globe' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used.","line":79,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":140,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&apos;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&lsquo;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&#39;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&rsquo;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":140,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&apos;administration.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&lsquo;administration.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&#39;administration.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&rsquo;administration.\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":163,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&apos;Administration\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&lsquo;Administration\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&#39;Administration\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&rsquo;Administration\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":285,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9601,9615],"text":"Vue d&apos;ensemble"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9601,9615],"text":"Vue d&lsquo;ensemble"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9601,9615],"text":"Vue d&#39;ensemble"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9601,9615],"text":"Vue d&rsquo;ensemble"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":296,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10095,10118],"text":"Métriques d&apos;Utilisation"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10095,10118],"text":"Métriques d&lsquo;Utilisation"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10095,10118],"text":"Métriques d&#39;Utilisation"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10095,10118],"text":"Métriques d&rsquo;Utilisation"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useUser } from '@clerk/nextjs'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\r\nimport { Progress } from '@/components/ui/progress'\r\nimport { \r\n  Shield, \r\n  Users, \r\n  Database, \r\n  BarChart3, \r\n  Settings, \r\n  AlertTriangle,\r\n  CheckCircle,\r\n  XCircle,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Activity,\r\n  Globe,\r\n  Zap,\r\n  Crown,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Download,\r\n  RefreshCw\r\n} from 'lucide-react'\r\n\r\ninterface AdminStats {\r\n  totalUsers: number\r\n  totalProjects: number\r\n  totalGenerations: number\r\n  totalRevenue: number\r\n  activeUsers: number\r\n  systemHealth: {\r\n    database: 'healthy' | 'warning' | 'error'\r\n    redis: 'healthy' | 'warning' | 'error'\r\n    ai: 'healthy' | 'warning' | 'error'\r\n    storage: 'healthy' | 'warning' | 'error'\r\n  }\r\n}\r\n\r\ninterface User {\r\n  id: string\r\n  email: string\r\n  plan: string\r\n  createdAt: string\r\n  lastLoginAt: string\r\n  projectsCount: number\r\n  generationsUsed: number\r\n  isActive: boolean\r\n}\r\n\r\ninterface SystemAlert {\r\n  id: string\r\n  type: 'error' | 'warning' | 'info'\r\n  title: string\r\n  message: string\r\n  timestamp: string\r\n  resolved: boolean\r\n}\r\n\r\ninterface UsageMetric {\r\n  date: string\r\n  users: number\r\n  projects: number\r\n  generations: number\r\n  revenue: number\r\n}\r\n\r\nexport default function AdminPanel() {\r\n  const { user } = useUser()\r\n  const [stats, setStats] = useState<AdminStats | null>(null)\r\n  const [users, setUsers] = useState<User[]>([])\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([])\r\n  const [metrics, setMetrics] = useState<UsageMetric[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [activeTab, setActiveTab] = useState('overview')\r\n\r\n  // Vérifier si l'utilisateur est admin\r\n  const isAdmin = user?.publicMetadata?.role === 'admin'\r\n\r\n  useEffect(() => {\r\n    if (!isAdmin) return\r\n\r\n    const loadAdminData = async () => {\r\n      try {\r\n        setLoading(true)\r\n\r\n        // Charger les statistiques\r\n        const statsResponse = await fetch('/api/admin/stats')\r\n        if (statsResponse.ok) {\r\n          const statsData = await statsResponse.json()\r\n          setStats(statsData)\r\n        }\r\n\r\n        // Charger les utilisateurs\r\n        const usersResponse = await fetch('/api/admin/users')\r\n        if (usersResponse.ok) {\r\n          const usersData = await usersResponse.json()\r\n          setUsers(usersData)\r\n        }\r\n\r\n        // Charger les alertes\r\n        const alertsResponse = await fetch('/api/admin/alerts')\r\n        if (alertsResponse.ok) {\r\n          const alertsData = await alertsResponse.json()\r\n          setAlerts(alertsData)\r\n        }\r\n\r\n        // Charger les métriques\r\n        const metricsResponse = await fetch('/api/admin/metrics')\r\n        if (metricsResponse.ok) {\r\n          const metricsData = await metricsResponse.json()\r\n          setMetrics(metricsData)\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Erreur chargement données admin:', error)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    loadAdminData()\r\n  }, [isAdmin])\r\n\r\n  if (!isAdmin) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <Card className=\"w-96\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-center\">\r\n              <Shield className=\"h-12 w-12 mx-auto text-red-500 mb-4\" />\r\n              <h2 className=\"text-xl font-bold mb-2\">Accès Refusé</h2>\r\n              <p className=\"text-muted-foreground\">\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent\">\r\n            Panel d'Administration\r\n          </h1>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            Gestion et monitoring de la plateforme Rork AI Builder\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\r\n            <Shield className=\"h-3 w-3\" />\r\n            <span>Admin</span>\r\n          </Badge>\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Actualiser\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistiques rapides */}\r\n      {stats && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Utilisateurs</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.totalUsers.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +12% ce mois\r\n                  </p>\r\n                </div>\r\n                <Users className=\"h-8 w-8 text-blue-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Projets</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.totalProjects.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +8% ce mois\r\n                  </p>\r\n                </div>\r\n                <Database className=\"h-8 w-8 text-green-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Générations</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.totalGenerations.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +25% ce mois\r\n                  </p>\r\n                </div>\r\n                <Zap className=\"h-8 w-8 text-yellow-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Revenus</p>\r\n                  <p className=\"text-2xl font-bold\">€{stats.totalRevenue.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +15% ce mois\r\n                  </p>\r\n                </div>\r\n                <Crown className=\"h-8 w-8 text-purple-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Santé du système */}\r\n      {stats && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              <span>Santé du Système</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {Object.entries(stats.systemHealth).map(([service, status]) => (\r\n                <div key={service} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    {status === 'healthy' && <CheckCircle className=\"h-5 w-5 text-green-600\" />}\r\n                    {status === 'warning' && <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />}\r\n                    {status === 'error' && <XCircle className=\"h-5 w-5 text-red-600\" />}\r\n                    <span className=\"font-medium capitalize\">{service}</span>\r\n                  </div>\r\n                  <Badge variant={\r\n                    status === 'healthy' ? 'default' : \r\n                    status === 'warning' ? 'secondary' : 'destructive'\r\n                  }>\r\n                    {status}\r\n                  </Badge>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Contenu principal avec tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Vue d'ensemble</TabsTrigger>\r\n          <TabsTrigger value=\"users\">Utilisateurs</TabsTrigger>\r\n          <TabsTrigger value=\"alerts\">Alertes</TabsTrigger>\r\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Métriques d'utilisation */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Métriques d'Utilisation</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span>Utilisateurs Actifs</span>\r\n                      <span>{stats?.activeUsers || 0}</span>\r\n                    </div>\r\n                    <Progress value={((stats?.activeUsers || 0) / (stats?.totalUsers || 1)) * 100} />\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span>Générations ce mois</span>\r\n                      <span>{stats?.totalGenerations || 0}</span>\r\n                    </div>\r\n                    <Progress value={75} />\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span>Projets créés</span>\r\n                      <span>{stats?.totalProjects || 0}</span>\r\n                    </div>\r\n                    <Progress value={60} />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Alertes récentes */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Alertes Récentes</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {alerts.slice(0, 5).map((alert) => (\r\n                    <div key={alert.id} className={`flex items-start space-x-3 p-3 rounded-lg ${\r\n                      alert.type === 'error' ? 'bg-red-50 dark:bg-red-950' :\r\n                      alert.type === 'warning' ? 'bg-yellow-50 dark:bg-yellow-950' :\r\n                      'bg-blue-50 dark:bg-blue-950'\r\n                    }`}>\r\n                      {alert.type === 'error' && <XCircle className=\"h-4 w-4 text-red-600 mt-0.5\" />}\r\n                      {alert.type === 'warning' && <AlertTriangle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />}\r\n                      {alert.type === 'info' && <CheckCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />}\r\n                      <div className=\"flex-1\">\r\n                        <h4 className=\"font-medium text-sm\">{alert.title}</h4>\r\n                        <p className=\"text-xs text-muted-foreground\">{alert.message}</p>\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {new Date(alert.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                      {!alert.resolved && (\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          Résoudre\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"users\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                <span>Gestion des Utilisateurs</span>\r\n                <Button size=\"sm\">\r\n                  <Download className=\"h-4 w-4 mr-2\" />\r\n                  Exporter\r\n                </Button>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {users.map((user) => (\r\n                  <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <div className=\"w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-medium\">\r\n                        {user.email.charAt(0).toUpperCase()}\r\n                      </div>\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{user.email}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Inscrit le {new Date(user.createdAt).toLocaleDateString()}\r\n                        </p>\r\n                        <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mt-1\">\r\n                          <span>{user.projectsCount} projets</span>\r\n                          <span>{user.generationsUsed} générations</span>\r\n                          <span className={`flex items-center space-x-1 ${\r\n                            user.isActive ? 'text-green-600' : 'text-gray-400'\r\n                          }`}>\r\n                            <div className={`w-2 h-2 rounded-full ${\r\n                              user.isActive ? 'bg-green-600' : 'bg-gray-400'\r\n                            }`}></div>\r\n                            <span>{user.isActive ? 'Actif' : 'Inactif'}</span>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge variant={\r\n                        user.plan === 'FREE' ? 'secondary' :\r\n                        user.plan === 'PRO' ? 'default' : 'destructive'\r\n                      }>\r\n                        {user.plan}\r\n                      </Badge>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Eye className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Edit className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Gestion des Alertes</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {alerts.map((alert) => (\r\n                  <div key={alert.id} className={`flex items-start justify-between p-4 border rounded-lg ${\r\n                    alert.resolved ? 'opacity-60' : ''\r\n                  }`}>\r\n                    <div className=\"flex items-start space-x-3\">\r\n                      {alert.type === 'error' && <XCircle className=\"h-5 w-5 text-red-600 mt-0.5\" />}\r\n                      {alert.type === 'warning' && <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />}\r\n                      {alert.type === 'info' && <CheckCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />}\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{alert.title}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">{alert.message}</p>\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {new Date(alert.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      {alert.resolved ? (\r\n                        <Badge variant=\"secondary\">Résolue</Badge>\r\n                      ) : (\r\n                        <>\r\n                          <Button size=\"sm\" variant=\"outline\">\r\n                            Résoudre\r\n                          </Button>\r\n                          <Button size=\"sm\" variant=\"destructive\">\r\n                            Supprimer\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Évolution des Utilisateurs</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\r\n                  Graphique des utilisateurs (à implémenter)\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Revenus</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\r\n                  Graphique des revenus (à implémenter)\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\dashboard\\AdvancedDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\editor\\MonacoCodeEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\generation\\AdvancedCodeGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,155],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nInput.displayName = \"Input\"\r\n\r\nexport { Input }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,164],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface TextareaProps\r\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <textarea\r\n        className={cn(\r\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nTextarea.displayName = \"Textarea\"\r\n\r\nexport { Textarea }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\__tests__\\validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\code-execution.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CodeExecutionSchema' is assigned a value but only used as a type.","line":5,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'framework' is assigned a value but never used.","line":17,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":43},{"ruleId":"prefer-const","severity":2,"message":"'fullHTML' is never reassigned. Use 'const' instead.","line":19,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":19,"endColumn":15,"fix":{"range":[617,1032],"text":"const fullHTML = `<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Application Générée</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <style>\r\n        ${css || ''}\r\n    </style>\r\n</head>\r\n<body>\r\n    ${html}\r\n    ${javascript ? `<script>${javascript}</script>` : ''}\r\n</body>\r\n</html>`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Code execution utilities for preview and testing\r\nimport { z } from 'zod'\r\n\r\n// Schema pour valider le code d'entrée\r\nconst CodeExecutionSchema = z.object({\r\n  html: z.string(),\r\n  css: z.string().optional(),\r\n  javascript: z.string().optional(),\r\n  framework: z.enum(['react', 'vue', 'vanilla', 'nextjs', 'svelte']),\r\n  dependencies: z.array(z.string()).optional(),\r\n})\r\n\r\nexport type CodeExecution = z.infer<typeof CodeExecutionSchema>\r\n\r\n// Fonction pour créer un HTML complet avec le code\r\nexport function createFullHTML(code: CodeExecution): string {\r\n  const { html, css, javascript, framework } = code\r\n\r\n  let fullHTML = `<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Application Générée</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <style>\r\n        ${css || ''}\r\n    </style>\r\n</head>\r\n<body>\r\n    ${html}\r\n    ${javascript ? `<script>${javascript}</script>` : ''}\r\n</body>\r\n</html>`\r\n\r\n  return fullHTML\r\n}\r\n\r\n// Fonction pour créer un package.json pour les frameworks\r\nexport function createPackageJson(\r\n  framework: string,\r\n  dependencies: string[] = []\r\n): string {\r\n  const baseDeps = {\r\n    react: {\r\n      'react': '^18.2.0',\r\n      'react-dom': '^18.2.0',\r\n    },\r\n    vue: {\r\n      'vue': '^3.3.0',\r\n    },\r\n    nextjs: {\r\n      'next': '^14.0.0',\r\n      'react': '^18.2.0',\r\n      'react-dom': '^18.2.0',\r\n    },\r\n    svelte: {\r\n      'svelte': '^4.0.0',\r\n    },\r\n    vanilla: {},\r\n  }\r\n\r\n  const frameworkDeps = baseDeps[framework as keyof typeof baseDeps] || {}\r\n  const customDeps = dependencies.reduce((acc, dep) => {\r\n    acc[dep] = 'latest'\r\n    return acc\r\n  }, {} as Record<string, string>)\r\n\r\n  const packageJson = {\r\n    name: 'generated-app',\r\n    version: '1.0.0',\r\n    description: 'Application générée avec Rork AI Builder',\r\n    main: 'index.js',\r\n    scripts: {\r\n      dev: framework === 'nextjs' ? 'next dev' : 'vite',\r\n      build: framework === 'nextjs' ? 'next build' : 'vite build',\r\n      start: framework === 'nextjs' ? 'next start' : 'vite preview',\r\n    },\r\n    dependencies: {\r\n      ...frameworkDeps,\r\n      ...customDeps,\r\n    },\r\n    devDependencies: {\r\n      '@types/react': '^18.2.0',\r\n      '@types/react-dom': '^18.2.0',\r\n      'typescript': '^5.0.0',\r\n      'vite': '^4.4.0',\r\n    },\r\n  }\r\n\r\n  return JSON.stringify(packageJson, null, 2)\r\n}\r\n\r\n// Fonction pour créer un fichier de configuration Vite\r\nexport function createViteConfig(framework: string): string {\r\n  if (framework === 'nextjs') {\r\n    return `/** @type {import('next').NextConfig} */\r\nconst nextConfig = {\r\n  experimental: {\r\n    appDir: true,\r\n  },\r\n}\r\n\r\nmodule.exports = nextConfig`\r\n  }\r\n\r\n  return `import { defineConfig } from 'vite'\r\nimport react from '@vitejs/plugin-react'\r\nimport vue from '@vitejs/plugin-vue'\r\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\r\n\r\nexport default defineConfig({\r\n  plugins: [\r\n    ${framework === 'react' ? 'react()' : ''}\r\n    ${framework === 'vue' ? 'vue()' : ''}\r\n    ${framework === 'svelte' ? 'svelte()' : ''}\r\n  ],\r\n  server: {\r\n    port: 3000,\r\n  },\r\n})`\r\n}\r\n\r\n// Fonction pour valider le code avant exécution\r\nexport function validateCode(code: string, type: 'html' | 'css' | 'javascript'): {\r\n  isValid: boolean\r\n  errors: string[]\r\n} {\r\n  const errors: string[] = []\r\n\r\n  try {\r\n    switch (type) {\r\n      case 'html':\r\n        // Validation HTML basique\r\n        if (!code.includes('<html') && !code.includes('<div') && !code.includes('<body')) {\r\n          errors.push('Le code HTML semble incomplet')\r\n        }\r\n        break\r\n\r\n      case 'css':\r\n        // Validation CSS basique\r\n        if (code && !code.includes('{') && !code.includes('}')) {\r\n          errors.push('Le code CSS semble mal formaté')\r\n        }\r\n        break\r\n\r\n      case 'javascript':\r\n        // Validation JavaScript basique\r\n        if (code) {\r\n          try {\r\n            new Function(code)\r\n          } catch (e) {\r\n            errors.push(`Erreur JavaScript: ${e}`)\r\n          }\r\n        }\r\n        break\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isValid: false,\r\n      errors: [`Erreur de validation: ${error}`],\r\n    }\r\n  }\r\n}\r\n\r\n// Fonction pour extraire les métadonnées du code\r\nexport function extractCodeMetadata(code: CodeExecution): {\r\n  title: string\r\n  description: string\r\n  tags: string[]\r\n  complexity: 'simple' | 'medium' | 'complex'\r\n} {\r\n  const html = code.html.toLowerCase()\r\n  \r\n  // Détecter la complexité\r\n  let complexity: 'simple' | 'medium' | 'complex' = 'simple'\r\n  if (html.includes('api') || html.includes('fetch') || html.includes('async')) {\r\n    complexity = 'complex'\r\n  } else if (html.includes('function') || html.includes('event') || html.includes('state')) {\r\n    complexity = 'medium'\r\n  }\r\n\r\n  // Extraire le titre\r\n  const titleMatch = code.html.match(/<title>(.*?)<\\/title>/i)\r\n  const title = titleMatch ? titleMatch[1] : 'Application Générée'\r\n\r\n  // Extraire la description\r\n  const descriptionMatch = code.html.match(/<meta name=\"description\" content=\"(.*?)\"/i)\r\n  const description = descriptionMatch ? descriptionMatch[1] : 'Application générée avec Rork AI Builder'\r\n\r\n  // Générer des tags basés sur le contenu\r\n  const tags: string[] = []\r\n  if (html.includes('dashboard') || html.includes('admin')) tags.push('dashboard')\r\n  if (html.includes('landing') || html.includes('hero')) tags.push('landing-page')\r\n  if (html.includes('portfolio') || html.includes('projet')) tags.push('portfolio')\r\n  if (html.includes('ecommerce') || html.includes('shop')) tags.push('ecommerce')\r\n  if (html.includes('blog') || html.includes('article')) tags.push('blog')\r\n  if (html.includes('responsive') || html.includes('mobile')) tags.push('responsive')\r\n\r\n  return {\r\n    title,\r\n    description,\r\n    tags,\r\n    complexity,\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":5,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[191,194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[191,194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[231,234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[231,234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[373,376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[373,376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[483,486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[483,486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[932,935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[932,935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1104,1107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1104,1107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Configuration de base de données simple pour éviter les erreurs d'import\r\nexport const prisma = {\r\n  // Mock Prisma client pour éviter les erreurs\r\n  user: {\r\n    findUnique: async (args: any) => null,\r\n    create: async (args: any) => ({ id: 'mock-id', ...args.data }),\r\n    update: async (args: any) => ({ id: args.where.id, ...args.data }),\r\n    delete: async (args: any) => ({ id: args.where.id }),\r\n  },\r\n  project: {\r\n    findMany: async () => [],\r\n    create: async (args: any) => ({ id: 'mock-id', ...args.data }),\r\n    update: async (args: any) => ({ id: args.where.id, ...args.data }),\r\n    delete: async (args: any) => ({ id: args.where.id }),\r\n  },\r\n  generation: {\r\n    findMany: async () => [],\r\n    create: async (args: any) => ({ id: 'mock-id', ...args.data }),\r\n  },\r\n}\r\n\r\n// Fonctions helper pour éviter les erreurs d'import\r\nexport const getProjects = async () => []\r\nexport const createProject = async (data: any) => ({ id: 'mock-id', ...data })\r\nexport const getProject = async (id: string) => ({ id, name: 'Mock Project' })\r\nexport const updateProject = async (id: string, data: any) => ({ id, ...data })\r\nexport const deleteProject = async (id: string) => ({ id })","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\payments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\tests\\e2e\\ai-builder.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\tests\\e2e\\basic.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]