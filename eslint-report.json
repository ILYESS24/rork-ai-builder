[{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\jest.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const nextJest = require('next/jest')\r\n\r\nconst createJestConfig = nextJest({\r\n  // Provide the path to your Next.js app to load next.config.js and .env files\r\n  dir: './',\r\n})\r\n\r\n// Add any custom config to be passed to Jest\r\nconst customJestConfig = {\r\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\r\n  testEnvironment: 'jest-environment-jsdom',\r\n  testMatch: [\r\n    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',\r\n    '<rootDir>/src/**/*.{test,spec}.{js,jsx,ts,tsx}',\r\n  ],\r\n  collectCoverageFrom: [\r\n    'src/**/*.{js,jsx,ts,tsx}',\r\n    '!src/**/*.d.ts',\r\n    '!src/**/*.stories.{js,jsx,ts,tsx}',\r\n    '!src/**/__tests__/**',\r\n    '!src/**/node_modules/**',\r\n  ],\r\n  coverageDirectory: 'coverage',\r\n  coverageReporters: ['text', 'lcov', 'html'],\r\n  coverageThreshold: {\r\n    global: {\r\n      branches: 70,\r\n      functions: 70,\r\n      lines: 70,\r\n      statements: 70,\r\n    },\r\n  },\r\n  moduleNameMapping: {\r\n    '^@/(.*)$': '<rootDir>/src/$1',\r\n  },\r\n  testTimeout: 30000, // 30 secondes pour les tests de fuzzing\r\n  verbose: true,\r\n  // Configuration pour les tests de fuzzing\r\n  testEnvironmentOptions: {\r\n    url: 'http://localhost:3000',\r\n  },\r\n  // Ignorer certains patterns\r\n  testPathIgnorePatterns: [\r\n    '<rootDir>/.next/',\r\n    '<rootDir>/node_modules/',\r\n    '<rootDir>/build/',\r\n    '<rootDir>/dist/',\r\n  ],\r\n}\r\n\r\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\r\nmodule.exports = createJestConfig(customJestConfig)","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\sentry.client.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\sentry.edge.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\sentry.server.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\__tests__\\fuzzing.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":35,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3020,3023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3020,3023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4203,4206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4203,4206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":140,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5641,5644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5641,5644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'token' is defined but never used.","line":199,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6789,6792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6789,6792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7880,7883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7880,7883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9209,9212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9209,9212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10553,10556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10553,10556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11689,11692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11689,11692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Tests de Fuzzing pour Rork AI Builder\r\n * Utilise fast-check (équivalent QuickCheck pour TypeScript)\r\n */\r\n\r\nimport fc from 'fast-check'\r\nimport { describe, it, expect } from '@jest/globals'\r\n\r\n// Configuration fast-check\r\nconst ARBITRARY_CONFIG = {\r\n  numRuns: 100, // Nombre de tests à exécuter\r\n  timeout: 10000, // Timeout en ms\r\n}\r\n\r\ndescribe('🧪 Tests de Fuzzing - Rork AI Builder', () => {\r\n  \r\n  describe('🔐 Tests de sécurité des inputs utilisateur', () => {\r\n    \r\n    it('doit gérer tous les types de prompts sans crash', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.string({ \r\n            minLength: 1, \r\n            maxLength: 10000,\r\n          }),\r\n          (prompt) => {\r\n            // Test que la fonction de validation ne crash pas\r\n            const isValidPrompt = (input: string): boolean => {\r\n              try {\r\n                // Simulation de la validation des prompts\r\n                return input.length > 0 && \r\n                       input.length <= 10000 && \r\n                       !input.includes('<script>') &&\r\n                       !input.includes('javascript:')\r\n              } catch (error) {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = isValidPrompt(prompt)\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit valider les emails dans tous les formats', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.emailAddress(),\r\n          (email) => {\r\n            const isValidEmail = (email: string): boolean => {\r\n              const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n              return emailRegex.test(email)\r\n            }\r\n            \r\n            expect(isValidEmail(email)).toBe(true)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit gérer les URLs malformées sans erreur', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.webUrl({ withFragments: true, withQueryParameters: true }),\r\n          (url) => {\r\n            const isValidUrl = (url: string): boolean => {\r\n              try {\r\n                new URL(url)\r\n                return true\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            expect(typeof isValidUrl(url)).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('📊 Tests de génération de code', () => {\r\n    \r\n    it('doit générer du code valide pour tous les types de prompts', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            prompt: fc.string({ minLength: 10, maxLength: 500 }),\r\n            language: fc.constantFrom('javascript', 'typescript', 'python', 'html', 'css'),\r\n            framework: fc.constantFrom('react', 'nextjs', 'vue', 'angular', 'svelte'),\r\n          }),\r\n          ({ prompt, language, framework }) => {\r\n            const generateCode = (input: any): string => {\r\n              // Simulation de la génération de code\r\n              const template = `\r\n// Code généré pour: ${input.prompt}\r\n// Langage: ${input.language}\r\n// Framework: ${input.framework}\r\n\r\nfunction generatedFunction() {\r\n  return \"Code généré avec succès\"\r\n}\r\n\r\nexport default generatedFunction\r\n              `\r\n              return template.trim()\r\n            }\r\n            \r\n            const result = generateCode({ prompt, language, framework })\r\n            expect(result).toContain('Code généré pour:')\r\n            expect(result).toContain(language)\r\n            expect(result).toContain(framework)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit gérer les templates complexes sans erreur', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            name: fc.string({ minLength: 1, maxLength: 50 }),\r\n            variables: fc.array(fc.string({ minLength: 1, maxLength: 20 }), { minLength: 0, maxLength: 10 }),\r\n            template: fc.string({ minLength: 10, maxLength: 1000 }),\r\n          }),\r\n          ({ name, variables, template }) => {\r\n            const processTemplate = (input: any): string => {\r\n              let result = input.template\r\n              input.variables.forEach((variable: string, index: number) => {\r\n                try {\r\n                  // Échapper les caractères spéciaux regex\r\n                  const escapedVariable = variable.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\r\n                  result = result.replace(new RegExp(`\\\\{${escapedVariable}\\\\}`, 'g'), `value_${index}`)\r\n                } catch (error) {\r\n                  // En cas d'erreur regex, utiliser replace simple\r\n                  result = result.replace(`{${variable}}`, `value_${index}`)\r\n                }\r\n              })\r\n              return result\r\n            }\r\n            \r\n            const result = processTemplate({ name, variables, template })\r\n            expect(typeof result).toBe('string')\r\n            expect(result.length).toBeGreaterThan(0)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('🔌 Tests des API et intégrations', () => {\r\n    \r\n    it('doit gérer les réponses API de toutes tailles', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            status: fc.integer({ min: 200, max: 599 }),\r\n            data: fc.string({ minLength: 0, maxLength: 50000 }),\r\n            headers: fc.dictionary(fc.string(), fc.string()),\r\n          }),\r\n          ({ status, data, headers }) => {\r\n            const processApiResponse = (response: any): boolean => {\r\n              try {\r\n                // Simulation du traitement des réponses API\r\n                const isSuccess = response.status >= 200 && response.status < 300\r\n                const hasData = response.data && response.data.length > 0\r\n                const hasHeaders = Object.keys(response.headers).length > 0\r\n                \r\n                return isSuccess === hasData && hasHeaders\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = processApiResponse({ status, data, headers })\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit valider les tokens JWT de toutes formes', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            header: fc.string({ minLength: 10, maxLength: 100 }),\r\n            payload: fc.string({ minLength: 10, maxLength: 500 }),\r\n            signature: fc.string({ minLength: 10, maxLength: 100 }),\r\n          }),\r\n          ({ header, payload, signature }) => {\r\n            const validateJWT = (token: any): boolean => {\r\n              try {\r\n                // Simulation de la validation JWT\r\n                const tokenString = `${header}.${payload}.${signature}`\r\n                return tokenString.split('.').length === 3\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = validateJWT({ header, payload, signature })\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('💾 Tests de base de données', () => {\r\n    \r\n    it('doit gérer les requêtes SQL complexes', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            table: fc.string({ minLength: 1, maxLength: 50 }),\r\n            columns: fc.array(fc.string({ minLength: 1, maxLength: 30 }), { minLength: 1, maxLength: 10 }),\r\n            conditions: fc.array(fc.string({ minLength: 5, maxLength: 100 }), { minLength: 0, maxLength: 5 }),\r\n          }),\r\n          ({ table, columns, conditions }) => {\r\n            const buildQuery = (input: any): string => {\r\n              try {\r\n                const selectClause = `SELECT ${input.columns.join(', ')}`\r\n                const fromClause = `FROM ${input.table}`\r\n                const whereClause = input.conditions.length > 0 \r\n                  ? `WHERE ${input.conditions.join(' AND ')}` \r\n                  : ''\r\n                \r\n                return `${selectClause} ${fromClause} ${whereClause}`.trim()\r\n              } catch {\r\n                return 'SELECT * FROM error'\r\n              }\r\n            }\r\n            \r\n            const result = buildQuery({ table, columns, conditions })\r\n            expect(result).toContain('SELECT')\r\n            expect(result).toContain('FROM')\r\n            expect(typeof result).toBe('string')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit valider les données utilisateur avant insertion', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            email: fc.emailAddress(),\r\n            name: fc.string({ minLength: 1, maxLength: 100 }),\r\n            age: fc.integer({ min: 0, max: 150 }),\r\n            metadata: fc.dictionary(fc.string(), fc.oneof(fc.string(), fc.integer(), fc.boolean())),\r\n          }),\r\n          ({ email, name, age, metadata }) => {\r\n            const validateUserData = (userData: any): boolean => {\r\n              try {\r\n                const emailValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(userData.email)\r\n                const nameValid = userData.name && userData.name.length > 0\r\n                const ageValid = userData.age >= 0 && userData.age <= 150\r\n                const metadataValid = typeof userData.metadata === 'object'\r\n                \r\n                return emailValid && nameValid && ageValid && metadataValid\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = validateUserData({ email, name, age, metadata })\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('🎨 Tests de rendu UI', () => {\r\n    \r\n    it('doit gérer tous les types de props React', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            title: fc.string({ minLength: 0, maxLength: 100 }),\r\n            count: fc.integer({ min: -1000, max: 10000 }),\r\n            isActive: fc.boolean(),\r\n            items: fc.array(fc.string(), { minLength: 0, maxLength: 50 }),\r\n            style: fc.dictionary(fc.string(), fc.string()),\r\n          }),\r\n          ({ title, count, isActive, items, style }) => {\r\n            const validateProps = (props: any): boolean => {\r\n              try {\r\n                return typeof props.title === 'string' &&\r\n                       typeof props.count === 'number' &&\r\n                       typeof props.isActive === 'boolean' &&\r\n                       Array.isArray(props.items) &&\r\n                       typeof props.style === 'object'\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = validateProps({ title, count, isActive, items, style })\r\n            expect(result).toBe(true)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n\r\n    it('doit gérer les événements utilisateur complexes', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.record({\r\n            type: fc.constantFrom('click', 'submit', 'change', 'focus', 'blur'),\r\n            target: fc.string({ minLength: 1, maxLength: 50 }),\r\n            data: fc.dictionary(fc.string(), fc.string()),\r\n            timestamp: fc.integer({ min: 0, max: Date.now() }),\r\n          }),\r\n          ({ type, target, data, timestamp }) => {\r\n            const processEvent = (event: any): boolean => {\r\n              try {\r\n                const validTypes = ['click', 'submit', 'change', 'focus', 'blur']\r\n                return validTypes.includes(event.type) &&\r\n                       typeof event.target === 'string' &&\r\n                       typeof event.data === 'object' &&\r\n                       typeof event.timestamp === 'number'\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = processEvent({ type, target, data, timestamp })\r\n            expect(result).toBe(true)\r\n          }\r\n        ),\r\n        ARBITRARY_CONFIG\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('🚀 Tests de performance', () => {\r\n    \r\n    it('doit gérer les opérations de grande envergure', () => {\r\n      fc.assert(\r\n        fc.property(\r\n          fc.integer({ min: 1, max: 10000 }),\r\n          (size) => {\r\n            const processLargeOperation = (dataSize: number): boolean => {\r\n              try {\r\n                // Simulation d'une opération coûteuse\r\n                const data = new Array(dataSize).fill(0).map((_, i) => i)\r\n                const processed = data.map(x => x * 2).filter(x => x > 100)\r\n                return processed.length <= dataSize\r\n              } catch {\r\n                return false\r\n              }\r\n            }\r\n            \r\n            const result = processLargeOperation(size)\r\n            expect(typeof result).toBe('boolean')\r\n          }\r\n        ),\r\n        { numRuns: 50, timeout: 5000 } // Moins de runs pour les tests de performance\r\n      )\r\n    })\r\n  })\r\n})\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\api\\generate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\api\\health\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\layout-simple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\page-simple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Terminal' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport CodeGenerator from '@/components/ai/CodeGenerator'\nimport AdvancedEditor from '@/components/editor/AdvancedEditor'\nimport PromptSystem from '@/components/prompts/PromptSystem'\nimport { \n  Sparkles, \n  Code, \n  BarChart3, \n  Zap, \n  Users, \n  Globe,\n  Database,\n  Shield,\n  Rocket,\n  MessageSquare,\n  FileText,\n  Terminal\n} from 'lucide-react'\n\nexport default function HomePage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Sparkles className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                Rork AI Builder\n              </h1>\n              <Badge variant=\"secondary\" className=\"ml-2\">Enterprise Edition</Badge>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\">Se connecter</Button>\n              <Button>Commencer</Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h1 className=\"text-5xl font-bold tracking-tight text-gray-900 dark:text-white mb-6\">\n            Construisez des Applications IA{' '}\n            <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              en Minutes\n            </span>\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto\">\n            Plateforme complète de création d&apos;applications IA avec génération de code, \n            collaboration temps réel, et outils avancés pour développeurs et entreprises.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n              <Rocket className=\"mr-2 h-5 w-5\" />\n              Commencer Gratuitement\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-3\">\n              Voir la Démo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-white/50 dark:bg-slate-800/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n              Fonctionnalités Enterprise\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300\">\n              Tout ce dont vous avez besoin pour créer des applications IA professionnelles\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <Code className=\"h-10 w-10 text-blue-600 mb-4\" />\n                <CardTitle>Génération de Code IA</CardTitle>\n                <CardDescription>\n                  Générez du code complet avec l&apos;IA multi-provider (OpenAI, Claude, Gemini)\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <Users className=\"h-10 w-10 text-green-600 mb-4\" />\n                <CardTitle>Collaboration Temps Réel</CardTitle>\n                <CardDescription>\n                  Travaillez en équipe avec synchronisation temps réel et chat intégré\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <BarChart3 className=\"h-10 w-10 text-purple-600 mb-4\" />\n                <CardTitle>Dashboard Avancé</CardTitle>\n                <CardDescription>\n                  Suivez vos projets avec analytics et métriques détaillées\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <Database className=\"h-10 w-10 text-orange-600 mb-4\" />\n                <CardTitle>Base de Données Multi-Cloud</CardTitle>\n                <CardDescription>\n                  PostgreSQL, MongoDB, Redis avec gestion automatique\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <Shield className=\"h-10 w-10 text-red-600 mb-4\" />\n                <CardTitle>Sécurité Enterprise</CardTitle>\n                <CardDescription>\n                  Authentification, autorisation et monitoring de sécurité\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <Globe className=\"h-10 w-10 text-teal-600 mb-4\" />\n                <CardTitle>Déploiement Global</CardTitle>\n                <CardDescription>\n                  Déployez sur Vercel, Render, AWS avec CI/CD automatique\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Application Interface */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Tabs defaultValue=\"generator\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n              <TabsTrigger value=\"generator\" className=\"flex items-center space-x-2\">\n                <Code className=\"h-4 w-4\" />\n                <span>Générateur IA</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"editor\" className=\"flex items-center space-x-2\">\n                <FileText className=\"h-4 w-4\" />\n                <span>Éditeur</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"prompts\" className=\"flex items-center space-x-2\">\n                <MessageSquare className=\"h-4 w-4\" />\n                <span>Prompts</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"dashboard\" className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"h-4 w-4\" />\n                <span>Dashboard</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"generator\" className=\"space-y-6\">\n              <CodeGenerator />\n            </TabsContent>\n\n            <TabsContent value=\"editor\" className=\"space-y-6\">\n              <AdvancedEditor />\n            </TabsContent>\n\n            <TabsContent value=\"prompts\" className=\"space-y-6\">\n              <PromptSystem />\n            </TabsContent>\n\n            <TabsContent value=\"dashboard\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"h-5 w-5 text-blue-500\" />\n                    <span>Mon Dashboard</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Gérez vos projets et suivez vos performances\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-12\">\n                    <BarChart3 className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                      Dashboard Personnel\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                      Connectez-vous pour accéder à votre dashboard personnalisé\n                    </p>\n                    <Button>Se connecter pour continuer</Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 text-white py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Sparkles className=\"h-6 w-6\" />\n            <span className=\"text-xl font-bold\">Rork AI Builder</span>\n            <Badge variant=\"secondary\">Enterprise Edition</Badge>\n          </div>\n          <p className=\"text-gray-400\">\n            © 2024 Rork AI Builder. Tous droits réservés.\n          </p>\n        </div>\n      </footer>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\sign-in\\[[...sign-in]]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\app\\sign-up\\[[...sign-up]]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\CodePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\admin\\AdminPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Globe' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used.","line":79,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":140,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&apos;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&lsquo;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&#39;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n&rsquo;avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":140,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&apos;administration.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&lsquo;administration.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&#39;administration.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3715,3832],"text":"\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d&rsquo;administration.\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":163,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&apos;Administration\r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&lsquo;Administration\r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&#39;Administration\r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4406,4454],"text":"\r\n            Panel d&rsquo;Administration\r\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":285,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9601,9615],"text":"Vue d&apos;ensemble"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9601,9615],"text":"Vue d&lsquo;ensemble"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9601,9615],"text":"Vue d&#39;ensemble"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9601,9615],"text":"Vue d&rsquo;ensemble"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":296,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10095,10118],"text":"Métriques d&apos;Utilisation"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10095,10118],"text":"Métriques d&lsquo;Utilisation"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10095,10118],"text":"Métriques d&#39;Utilisation"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10095,10118],"text":"Métriques d&rsquo;Utilisation"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useUser } from '@clerk/nextjs'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\r\nimport { Progress } from '@/components/ui/progress'\r\nimport { \r\n  Shield, \r\n  Users, \r\n  Database, \r\n  BarChart3, \r\n  Settings, \r\n  AlertTriangle,\r\n  CheckCircle,\r\n  XCircle,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Activity,\r\n  Globe,\r\n  Zap,\r\n  Crown,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Download,\r\n  RefreshCw\r\n} from 'lucide-react'\r\n\r\ninterface AdminStats {\r\n  totalUsers: number\r\n  totalProjects: number\r\n  totalGenerations: number\r\n  totalRevenue: number\r\n  activeUsers: number\r\n  systemHealth: {\r\n    database: 'healthy' | 'warning' | 'error'\r\n    redis: 'healthy' | 'warning' | 'error'\r\n    ai: 'healthy' | 'warning' | 'error'\r\n    storage: 'healthy' | 'warning' | 'error'\r\n  }\r\n}\r\n\r\ninterface User {\r\n  id: string\r\n  email: string\r\n  plan: string\r\n  createdAt: string\r\n  lastLoginAt: string\r\n  projectsCount: number\r\n  generationsUsed: number\r\n  isActive: boolean\r\n}\r\n\r\ninterface SystemAlert {\r\n  id: string\r\n  type: 'error' | 'warning' | 'info'\r\n  title: string\r\n  message: string\r\n  timestamp: string\r\n  resolved: boolean\r\n}\r\n\r\ninterface UsageMetric {\r\n  date: string\r\n  users: number\r\n  projects: number\r\n  generations: number\r\n  revenue: number\r\n}\r\n\r\nexport default function AdminPanel() {\r\n  const { user } = useUser()\r\n  const [stats, setStats] = useState<AdminStats | null>(null)\r\n  const [users, setUsers] = useState<User[]>([])\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([])\r\n  const [metrics, setMetrics] = useState<UsageMetric[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [activeTab, setActiveTab] = useState('overview')\r\n\r\n  // Vérifier si l'utilisateur est admin\r\n  const isAdmin = user?.publicMetadata?.role === 'admin'\r\n\r\n  useEffect(() => {\r\n    if (!isAdmin) return\r\n\r\n    const loadAdminData = async () => {\r\n      try {\r\n        setLoading(true)\r\n\r\n        // Charger les statistiques\r\n        const statsResponse = await fetch('/api/admin/stats')\r\n        if (statsResponse.ok) {\r\n          const statsData = await statsResponse.json()\r\n          setStats(statsData)\r\n        }\r\n\r\n        // Charger les utilisateurs\r\n        const usersResponse = await fetch('/api/admin/users')\r\n        if (usersResponse.ok) {\r\n          const usersData = await usersResponse.json()\r\n          setUsers(usersData)\r\n        }\r\n\r\n        // Charger les alertes\r\n        const alertsResponse = await fetch('/api/admin/alerts')\r\n        if (alertsResponse.ok) {\r\n          const alertsData = await alertsResponse.json()\r\n          setAlerts(alertsData)\r\n        }\r\n\r\n        // Charger les métriques\r\n        const metricsResponse = await fetch('/api/admin/metrics')\r\n        if (metricsResponse.ok) {\r\n          const metricsData = await metricsResponse.json()\r\n          setMetrics(metricsData)\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Erreur chargement données admin:', error)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    loadAdminData()\r\n  }, [isAdmin])\r\n\r\n  if (!isAdmin) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <Card className=\"w-96\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-center\">\r\n              <Shield className=\"h-12 w-12 mx-auto text-red-500 mb-4\" />\r\n              <h2 className=\"text-xl font-bold mb-2\">Accès Refusé</h2>\r\n              <p className=\"text-muted-foreground\">\r\n                Vous n'avez pas les permissions nécessaires pour accéder au panel d'administration.\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent\">\r\n            Panel d'Administration\r\n          </h1>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            Gestion et monitoring de la plateforme Rork AI Builder\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\r\n            <Shield className=\"h-3 w-3\" />\r\n            <span>Admin</span>\r\n          </Badge>\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Actualiser\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistiques rapides */}\r\n      {stats && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Utilisateurs</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.totalUsers.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +12% ce mois\r\n                  </p>\r\n                </div>\r\n                <Users className=\"h-8 w-8 text-blue-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Projets</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.totalProjects.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +8% ce mois\r\n                  </p>\r\n                </div>\r\n                <Database className=\"h-8 w-8 text-green-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Générations</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.totalGenerations.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +25% ce mois\r\n                  </p>\r\n                </div>\r\n                <Zap className=\"h-8 w-8 text-yellow-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Revenus</p>\r\n                  <p className=\"text-2xl font-bold\">€{stats.totalRevenue.toLocaleString()}</p>\r\n                  <p className=\"text-xs text-green-600 flex items-center mt-1\">\r\n                    <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                    +15% ce mois\r\n                  </p>\r\n                </div>\r\n                <Crown className=\"h-8 w-8 text-purple-600\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Santé du système */}\r\n      {stats && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              <span>Santé du Système</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {Object.entries(stats.systemHealth).map(([service, status]) => (\r\n                <div key={service} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    {status === 'healthy' && <CheckCircle className=\"h-5 w-5 text-green-600\" />}\r\n                    {status === 'warning' && <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />}\r\n                    {status === 'error' && <XCircle className=\"h-5 w-5 text-red-600\" />}\r\n                    <span className=\"font-medium capitalize\">{service}</span>\r\n                  </div>\r\n                  <Badge variant={\r\n                    status === 'healthy' ? 'default' : \r\n                    status === 'warning' ? 'secondary' : 'destructive'\r\n                  }>\r\n                    {status}\r\n                  </Badge>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Contenu principal avec tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Vue d'ensemble</TabsTrigger>\r\n          <TabsTrigger value=\"users\">Utilisateurs</TabsTrigger>\r\n          <TabsTrigger value=\"alerts\">Alertes</TabsTrigger>\r\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Métriques d'utilisation */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Métriques d'Utilisation</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span>Utilisateurs Actifs</span>\r\n                      <span>{stats?.activeUsers || 0}</span>\r\n                    </div>\r\n                    <Progress value={((stats?.activeUsers || 0) / (stats?.totalUsers || 1)) * 100} />\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span>Générations ce mois</span>\r\n                      <span>{stats?.totalGenerations || 0}</span>\r\n                    </div>\r\n                    <Progress value={75} />\r\n                  </div>\r\n                  <div>\r\n                    <div className=\"flex justify-between text-sm mb-2\">\r\n                      <span>Projets créés</span>\r\n                      <span>{stats?.totalProjects || 0}</span>\r\n                    </div>\r\n                    <Progress value={60} />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Alertes récentes */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Alertes Récentes</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {alerts.slice(0, 5).map((alert) => (\r\n                    <div key={alert.id} className={`flex items-start space-x-3 p-3 rounded-lg ${\r\n                      alert.type === 'error' ? 'bg-red-50 dark:bg-red-950' :\r\n                      alert.type === 'warning' ? 'bg-yellow-50 dark:bg-yellow-950' :\r\n                      'bg-blue-50 dark:bg-blue-950'\r\n                    }`}>\r\n                      {alert.type === 'error' && <XCircle className=\"h-4 w-4 text-red-600 mt-0.5\" />}\r\n                      {alert.type === 'warning' && <AlertTriangle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />}\r\n                      {alert.type === 'info' && <CheckCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />}\r\n                      <div className=\"flex-1\">\r\n                        <h4 className=\"font-medium text-sm\">{alert.title}</h4>\r\n                        <p className=\"text-xs text-muted-foreground\">{alert.message}</p>\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {new Date(alert.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                      {!alert.resolved && (\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          Résoudre\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"users\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                <span>Gestion des Utilisateurs</span>\r\n                <Button size=\"sm\">\r\n                  <Download className=\"h-4 w-4 mr-2\" />\r\n                  Exporter\r\n                </Button>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {users.map((user) => (\r\n                  <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <div className=\"w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-medium\">\r\n                        {user.email.charAt(0).toUpperCase()}\r\n                      </div>\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{user.email}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Inscrit le {new Date(user.createdAt).toLocaleDateString()}\r\n                        </p>\r\n                        <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mt-1\">\r\n                          <span>{user.projectsCount} projets</span>\r\n                          <span>{user.generationsUsed} générations</span>\r\n                          <span className={`flex items-center space-x-1 ${\r\n                            user.isActive ? 'text-green-600' : 'text-gray-400'\r\n                          }`}>\r\n                            <div className={`w-2 h-2 rounded-full ${\r\n                              user.isActive ? 'bg-green-600' : 'bg-gray-400'\r\n                            }`}></div>\r\n                            <span>{user.isActive ? 'Actif' : 'Inactif'}</span>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge variant={\r\n                        user.plan === 'FREE' ? 'secondary' :\r\n                        user.plan === 'PRO' ? 'default' : 'destructive'\r\n                      }>\r\n                        {user.plan}\r\n                      </Badge>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Eye className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Edit className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\">\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Gestion des Alertes</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {alerts.map((alert) => (\r\n                  <div key={alert.id} className={`flex items-start justify-between p-4 border rounded-lg ${\r\n                    alert.resolved ? 'opacity-60' : ''\r\n                  }`}>\r\n                    <div className=\"flex items-start space-x-3\">\r\n                      {alert.type === 'error' && <XCircle className=\"h-5 w-5 text-red-600 mt-0.5\" />}\r\n                      {alert.type === 'warning' && <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />}\r\n                      {alert.type === 'info' && <CheckCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />}\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{alert.title}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">{alert.message}</p>\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {new Date(alert.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      {alert.resolved ? (\r\n                        <Badge variant=\"secondary\">Résolue</Badge>\r\n                      ) : (\r\n                        <>\r\n                          <Button size=\"sm\" variant=\"outline\">\r\n                            Résoudre\r\n                          </Button>\r\n                          <Button size=\"sm\" variant=\"destructive\">\r\n                            Supprimer\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Évolution des Utilisateurs</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\r\n                  Graphique des utilisateurs (à implémenter)\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Revenus</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\r\n                  Graphique des revenus (à implémenter)\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ai\\CodeGenerator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Play' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { \r\n  Code, \r\n  Zap, \r\n  Copy, \r\n  Download, \r\n  Play,\r\n  Sparkles,\r\n  Bot,\r\n  Settings,\r\n  Languages\r\n} from 'lucide-react'\r\n\r\ninterface GeneratedCode {\r\n  id: string\r\n  prompt: string\r\n  code: string\r\n  language: string\r\n  timestamp: Date\r\n  provider: string\r\n}\r\n\r\nexport default function CodeGenerator() {\r\n  const [prompt, setPrompt] = useState('')\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n  const [generatedCode, setGeneratedCode] = useState<GeneratedCode | null>(null)\r\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript')\r\n  const [selectedProvider, setSelectedProvider] = useState('openai')\r\n\r\n  const languages = [\r\n    { value: 'javascript', label: 'JavaScript', icon: '🟨' },\r\n    { value: 'typescript', label: 'TypeScript', icon: '🔷' },\r\n    { value: 'python', label: 'Python', icon: '🐍' },\r\n    { value: 'react', label: 'React', icon: '⚛️' },\r\n    { value: 'nextjs', label: 'Next.js', icon: '▲' },\r\n    { value: 'vue', label: 'Vue.js', icon: '💚' },\r\n    { value: 'angular', label: 'Angular', icon: '🅰️' },\r\n    { value: 'nodejs', label: 'Node.js', icon: '🟢' },\r\n  ]\r\n\r\n  const providers = [\r\n    { value: 'openai', label: 'OpenAI GPT-4', icon: '🤖' },\r\n    { value: 'claude', label: 'Anthropic Claude', icon: '🧠' },\r\n    { value: 'gemini', label: 'Google Gemini', icon: '💎' },\r\n    { value: 'mistral', label: 'Mistral AI', icon: '🌪️' },\r\n  ]\r\n\r\n  const generateCode = async () => {\r\n    if (!prompt.trim()) return\r\n\r\n    setIsGenerating(true)\r\n    \r\n    try {\r\n      // Simulation de génération de code (comme sur Rork.com)\r\n      await new Promise(resolve => setTimeout(resolve, 2000))\r\n      \r\n      const mockGeneratedCode: GeneratedCode = {\r\n        id: Date.now().toString(),\r\n        prompt: prompt,\r\n        code: generateMockCode(prompt, selectedLanguage),\r\n        language: selectedLanguage,\r\n        timestamp: new Date(),\r\n        provider: selectedProvider\r\n      }\r\n      \r\n      setGeneratedCode(mockGeneratedCode)\r\n    } catch (error) {\r\n      console.error('Erreur lors de la génération:', error)\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }\r\n\r\n  const generateMockCode = (prompt: string, language: string): string => {\r\n    const baseCode = {\r\n      javascript: `// ${prompt}\r\nfunction generatedFunction() {\r\n  console.log('Code généré avec succès!');\r\n  return {\r\n    success: true,\r\n    message: 'Fonction générée par IA'\r\n  };\r\n}\r\n\r\nexport default generatedFunction;`,\r\n      typescript: `// ${prompt}\r\ninterface GeneratedResponse {\r\n  success: boolean;\r\n  message: string;\r\n}\r\n\r\nfunction generatedFunction(): GeneratedResponse {\r\n  console.log('Code TypeScript généré avec succès!');\r\n  return {\r\n    success: true,\r\n    message: 'Fonction TypeScript générée par IA'\r\n  };\r\n}\r\n\r\nexport default generatedFunction;`,\r\n      react: `// ${prompt}\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  title?: string;\r\n}\r\n\r\nconst GeneratedComponent: React.FC<Props> = ({ title = 'Composant Généré' }) => {\r\n  return (\r\n    <div className=\"generated-component\">\r\n      <h2>{title}</h2>\r\n      <p>Ce composant React a été généré par IA!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneratedComponent;`,\r\n      python: `# ${prompt}\r\ndef generated_function():\r\n    \"\"\"\r\n    Fonction générée par IA\r\n    \"\"\"\r\n    print(\"Code Python généré avec succès!\")\r\n    return {\r\n        \"success\": True,\r\n        \"message\": \"Fonction Python générée par IA\"\r\n    }\r\n\r\nif __name__ == \"__main__\":\r\n    result = generated_function()\r\n    print(result)`\r\n    }\r\n\r\n    return baseCode[language as keyof typeof baseCode] || baseCode.javascript\r\n  }\r\n\r\n  const copyToClipboard = () => {\r\n    if (generatedCode) {\r\n      navigator.clipboard.writeText(generatedCode.code)\r\n    }\r\n  }\r\n\r\n  const downloadCode = () => {\r\n    if (generatedCode) {\r\n      const blob = new Blob([generatedCode.code], { type: 'text/plain' })\r\n      const url = URL.createObjectURL(blob)\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = `generated_code.${generatedCode.language === 'javascript' ? 'js' : generatedCode.language === 'typescript' ? 'ts' : generatedCode.language === 'react' ? 'tsx' : 'py'}`\r\n      a.click()\r\n      URL.revokeObjectURL(url)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Configuration */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Settings className=\"h-5 w-5 text-blue-500\" />\r\n            <span>Configuration de Génération</span>\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Configurez le langage et le provider IA pour la génération de code\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {/* Sélection du langage */}\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Langage de programmation</label>\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                {languages.map((lang) => (\r\n                  <Button\r\n                    key={lang.value}\r\n                    variant={selectedLanguage === lang.value ? \"default\" : \"outline\"}\r\n                    size=\"sm\"\r\n                    onClick={() => setSelectedLanguage(lang.value)}\r\n                    className=\"justify-start\"\r\n                  >\r\n                    <span className=\"mr-2\">{lang.icon}</span>\r\n                    {lang.label}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Sélection du provider */}\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Provider IA</label>\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                {providers.map((provider) => (\r\n                  <Button\r\n                    key={provider.value}\r\n                    variant={selectedProvider === provider.value ? \"default\" : \"outline\"}\r\n                    size=\"sm\"\r\n                    onClick={() => setSelectedProvider(provider.value)}\r\n                    className=\"justify-start\"\r\n                  >\r\n                    <span className=\"mr-2\">{provider.icon}</span>\r\n                    {provider.label}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Zone de prompt */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Bot className=\"h-5 w-5 text-purple-500\" />\r\n            <span>Prompt de Génération</span>\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Décrivez le code que vous souhaitez générer (comme sur Rork.com)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            <Textarea\r\n              placeholder=\"Ex: Crée un composant React pour un bouton avec des animations CSS...\"\r\n              value={prompt}\r\n              onChange={(e) => setPrompt(e.target.value)}\r\n              className=\"min-h-[120px] resize-none\"\r\n            />\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Badge variant=\"secondary\">\r\n                  <Languages className=\"h-3 w-3 mr-1\" />\r\n                  {languages.find(l => l.value === selectedLanguage)?.label}\r\n                </Badge>\r\n                <Badge variant=\"secondary\">\r\n                  {providers.find(p => p.value === selectedProvider)?.label}\r\n                </Badge>\r\n              </div>\r\n              <Button \r\n                onClick={generateCode} \r\n                disabled={!prompt.trim() || isGenerating}\r\n                className=\"flex items-center space-x-2\"\r\n              >\r\n                {isGenerating ? (\r\n                  <>\r\n                    <Sparkles className=\"h-4 w-4 animate-spin\" />\r\n                    <span>Génération...</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Zap className=\"h-4 w-4\" />\r\n                    <span>Générer le Code</span>\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Code généré */}\r\n      {generatedCode && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Code className=\"h-5 w-5 text-green-500\" />\r\n                <span>Code Généré</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Button variant=\"outline\" size=\"sm\" onClick={copyToClipboard}>\r\n                  <Copy className=\"h-4 w-4 mr-1\" />\r\n                  Copier\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"sm\" onClick={downloadCode}>\r\n                  <Download className=\"h-4 w-4 mr-1\" />\r\n                  Télécharger\r\n                </Button>\r\n              </div>\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Généré le {generatedCode.timestamp.toLocaleString()} avec {providers.find(p => p.value === generatedCode.provider)?.label}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <pre className=\"bg-slate-900 text-slate-100 p-4 rounded-lg overflow-x-auto text-sm\">\r\n              <code>{generatedCode.code}</code>\r\n            </pre>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\dashboard\\AdvancedDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\editor\\AdvancedEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":5,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Palette' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":279,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur &quot;Exécuter\" pour voir les résultats"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur &ldquo;Exécuter\" pour voir les résultats"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur &#34;Exécuter\" pour voir les résultats"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur &rdquo;Exécuter\" pour voir les résultats"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":279,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur \"Exécuter&quot; pour voir les résultats"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur \"Exécuter&ldquo; pour voir les résultats"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur \"Exécuter&#34; pour voir les résultats"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9755,9804],"text":"🚀 Cliquez sur \"Exécuter&rdquo; pour voir les résultats"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { \r\n  Code, \r\n  Play, \r\n  Save, \r\n  Copy, \r\n  Download,\r\n  Maximize2,\r\n  Minimize2,\r\n  Settings,\r\n  Eye,\r\n  EyeOff,\r\n  Terminal,\r\n  FileText,\r\n  Palette,\r\n  Zap\r\n} from 'lucide-react'\r\n\r\ninterface EditorState {\r\n  code: string\r\n  language: string\r\n  theme: string\r\n  fontSize: number\r\n  isPreview: boolean\r\n  isFullscreen: boolean\r\n}\r\n\r\nexport default function AdvancedEditor() {\r\n  const [editorState, setEditorState] = useState<EditorState>({\r\n    code: `// Bienvenue dans l'éditeur Rork AI Builder\r\n// Tapez votre code ici...\r\n\r\nfunction helloWorld() {\r\n  console.log(\"Hello, Rork AI Builder!\");\r\n  return \"Code généré avec succès!\";\r\n}\r\n\r\n// Décommentez pour tester\r\n// helloWorld();`,\r\n    language: 'javascript',\r\n    theme: 'vs-dark',\r\n    fontSize: 14,\r\n    isPreview: false,\r\n    isFullscreen: false\r\n  })\r\n\r\n  const [output, setOutput] = useState('')\r\n  const [isRunning, setIsRunning] = useState(false)\r\n\r\n  const languages = [\r\n    { value: 'javascript', label: 'JavaScript', extension: '.js' },\r\n    { value: 'typescript', label: 'TypeScript', extension: '.ts' },\r\n    { value: 'python', label: 'Python', extension: '.py' },\r\n    { value: 'react', label: 'React', extension: '.tsx' },\r\n    { value: 'html', label: 'HTML', extension: '.html' },\r\n    { value: 'css', label: 'CSS', extension: '.css' },\r\n    { value: 'json', label: 'JSON', extension: '.json' },\r\n    { value: 'markdown', label: 'Markdown', extension: '.md' },\r\n  ]\r\n\r\n  const themes = [\r\n    { value: 'vs-dark', label: 'Dark' },\r\n    { value: 'vs-light', label: 'Light' },\r\n    { value: 'monokai', label: 'Monokai' },\r\n    { value: 'github', label: 'GitHub' },\r\n  ]\r\n\r\n  const runCode = async () => {\r\n    setIsRunning(true)\r\n    setOutput('')\r\n    \r\n    try {\r\n      // Simulation d'exécution de code\r\n      await new Promise(resolve => setTimeout(resolve, 1500))\r\n      \r\n      const mockOutput = `🚀 Exécution du code ${editorState.language.toUpperCase()}...\r\n\r\n✅ Compilation réussie\r\n📊 Analyse du code terminée\r\n🎯 Résultats:\r\n\r\nHello, Rork AI Builder!\r\nCode généré avec succès!\r\n\r\n⏱️ Temps d'exécution: 1.2s\r\n💾 Mémoire utilisée: 12.4 MB\r\n🔍 Lignes de code: ${editorState.code.split('\\n').length}\r\n\r\n✨ Code exécuté avec succès!`\r\n      \r\n      setOutput(mockOutput)\r\n    } catch (error) {\r\n      setOutput(`❌ Erreur d'exécution: ${error}`)\r\n    } finally {\r\n      setIsRunning(false)\r\n    }\r\n  }\r\n\r\n  const saveCode = () => {\r\n    const blob = new Blob([editorState.code], { type: 'text/plain' })\r\n    const url = URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    const extension = languages.find(l => l.value === editorState.language)?.extension || '.txt'\r\n    a.href = url\r\n    a.download = `code${extension}`\r\n    a.click()\r\n    URL.revokeObjectURL(url)\r\n  }\r\n\r\n  const copyCode = () => {\r\n    navigator.clipboard.writeText(editorState.code)\r\n  }\r\n\r\n  const togglePreview = () => {\r\n    setEditorState(prev => ({ ...prev, isPreview: !prev.isPreview }))\r\n  }\r\n\r\n  const toggleFullscreen = () => {\r\n    setEditorState(prev => ({ ...prev, isFullscreen: !prev.isFullscreen }))\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-4 ${editorState.isFullscreen ? 'fixed inset-0 z-50 bg-white dark:bg-slate-900 p-4' : ''}`}>\r\n      {/* Barre d'outils */}\r\n      <Card>\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <CardTitle className=\"flex items-center space-x-2\">\r\n                <Code className=\"h-5 w-5 text-blue-500\" />\r\n                <span>Éditeur de Code</span>\r\n              </CardTitle>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Badge variant=\"secondary\">\r\n                  {languages.find(l => l.value === editorState.language)?.label}\r\n                </Badge>\r\n                <Badge variant=\"outline\">\r\n                  {themes.find(t => t.value === editorState.theme)?.label}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Button variant=\"outline\" size=\"sm\" onClick={togglePreview}>\r\n                {editorState.isPreview ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"sm\" onClick={toggleFullscreen}>\r\n                {editorState.isFullscreen ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"pt-0\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              {/* Sélection du langage */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <label className=\"text-sm font-medium\">Langage:</label>\r\n                <select\r\n                  value={editorState.language}\r\n                  onChange={(e) => setEditorState(prev => ({ ...prev, language: e.target.value }))}\r\n                  className=\"px-2 py-1 border rounded text-sm\"\r\n                >\r\n                  {languages.map((lang) => (\r\n                    <option key={lang.value} value={lang.value}>\r\n                      {lang.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Sélection du thème */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <label className=\"text-sm font-medium\">Thème:</label>\r\n                <select\r\n                  value={editorState.theme}\r\n                  onChange={(e) => setEditorState(prev => ({ ...prev, theme: e.target.value }))}\r\n                  className=\"px-2 py-1 border rounded text-sm\"\r\n                >\r\n                  {themes.map((theme) => (\r\n                    <option key={theme.value} value={theme.value}>\r\n                      {theme.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Taille de police */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <label className=\"text-sm font-medium\">Taille:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"10\"\r\n                  max=\"24\"\r\n                  value={editorState.fontSize}\r\n                  onChange={(e) => setEditorState(prev => ({ ...prev, fontSize: parseInt(e.target.value) }))}\r\n                  className=\"w-20\"\r\n                />\r\n                <span className=\"text-sm text-gray-500\">{editorState.fontSize}px</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Button variant=\"outline\" size=\"sm\" onClick={copyCode}>\r\n                <Copy className=\"h-4 w-4 mr-1\" />\r\n                Copier\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"sm\" onClick={saveCode}>\r\n                <Save className=\"h-4 w-4 mr-1\" />\r\n                Sauvegarder\r\n              </Button>\r\n              <Button \r\n                onClick={runCode} \r\n                disabled={isRunning}\r\n                className=\"flex items-center space-x-1\"\r\n              >\r\n                {isRunning ? (\r\n                  <>\r\n                    <Zap className=\"h-4 w-4 animate-spin\" />\r\n                    <span>Exécution...</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Play className=\"h-4 w-4\" />\r\n                    <span>Exécuter</span>\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n        {/* Zone d'édition */}\r\n        <Card>\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <FileText className=\"h-4 w-4\" />\r\n              <span>Code</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Textarea\r\n              value={editorState.code}\r\n              onChange={(e) => setEditorState(prev => ({ ...prev, code: e.target.value }))}\r\n              className={`font-mono resize-none ${\r\n                editorState.theme === 'vs-dark' ? 'bg-slate-900 text-slate-100' : 'bg-white text-slate-900'\r\n              }`}\r\n              style={{ \r\n                fontSize: `${editorState.fontSize}px`,\r\n                minHeight: '400px',\r\n                fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace'\r\n              }}\r\n              placeholder=\"Tapez votre code ici...\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Zone de sortie */}\r\n        <Card>\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Terminal className=\"h-4 w-4\" />\r\n              <span>Sortie</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"bg-slate-900 text-slate-100 p-4 rounded-lg min-h-[400px] font-mono text-sm overflow-auto\">\r\n              {output ? (\r\n                <pre className=\"whitespace-pre-wrap\">{output}</pre>\r\n              ) : (\r\n                <div className=\"text-slate-400\">\r\n                  <p>🚀 Cliquez sur \"Exécuter\" pour voir les résultats</p>\r\n                  <p className=\"mt-2\">💡 Vous pouvez exécuter du code JavaScript, Python, et plus encore!</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Statistiques du code */}\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-blue-600\">\r\n                {editorState.code.split('\\n').length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Lignes</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-green-600\">\r\n                {editorState.code.split(' ').filter(word => word.trim()).length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Mots</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-purple-600\">\r\n                {editorState.code.length}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Caractères</div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-orange-600\">\r\n                {Math.round(editorState.code.length / 1024 * 100) / 100}KB\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Taille</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\editor\\MonacoCodeEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\generation\\AdvancedCodeGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\prompts\\PromptSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Lightbulb' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThumbsDown' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":13},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"usePrompt\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":472,"column":70,"nodeType":"Identifier","endLine":472,"endColumn":79},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"usePrompt\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":562,"column":70,"nodeType":"Identifier","endLine":562,"endColumn":79}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { \r\n  MessageSquare, \r\n  Send, \r\n  Copy, \r\n  Star,\r\n  History,\r\n  TrendingUp,\r\n  Lightbulb,\r\n  Target,\r\n  Zap,\r\n  Bot,\r\n  User,\r\n  Clock,\r\n  ThumbsUp,\r\n  ThumbsDown,\r\n  Share2\r\n} from 'lucide-react'\r\n\r\ninterface Prompt {\r\n  id: string\r\n  content: string\r\n  category: string\r\n  language: string\r\n  timestamp: Date\r\n  rating: number\r\n  usage: number\r\n}\r\n\r\ninterface Conversation {\r\n  id: string\r\n  messages: Array<{\r\n    id: string\r\n    role: 'user' | 'assistant'\r\n    content: string\r\n    timestamp: Date\r\n  }>\r\n  timestamp: Date\r\n}\r\n\r\nexport default function PromptSystem() {\r\n  const [prompt, setPrompt] = useState('')\r\n  const [selectedCategory, setSelectedCategory] = useState('general')\r\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript')\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n  const [currentConversation, setCurrentConversation] = useState<Conversation | null>(null)\r\n  const [savedPrompts, setSavedPrompts] = useState<Prompt[]>([])\r\n  const [conversationHistory, setConversationHistory] = useState<Conversation[]>([])\r\n\r\n  const categories = [\r\n    { value: 'general', label: 'Général', icon: '💡', description: 'Prompts généraux pour tous types de code' },\r\n    { value: 'web', label: 'Web Development', icon: '🌐', description: 'Sites web, applications web, APIs' },\r\n    { value: 'mobile', label: 'Mobile', icon: '📱', description: 'Applications mobiles iOS/Android' },\r\n    { value: 'ai', label: 'IA & ML', icon: '🤖', description: 'Intelligence artificielle et machine learning' },\r\n    { value: 'data', label: 'Data Science', icon: '📊', description: 'Analyse de données, visualisation' },\r\n    { value: 'devops', label: 'DevOps', icon: '⚙️', description: 'Déploiement, CI/CD, infrastructure' },\r\n    { value: 'security', label: 'Sécurité', icon: '🔒', description: 'Sécurité, authentification, cryptage' },\r\n  ]\r\n\r\n  const languages = [\r\n    { value: 'javascript', label: 'JavaScript', icon: '🟨' },\r\n    { value: 'typescript', label: 'TypeScript', icon: '🔷' },\r\n    { value: 'python', label: 'Python', icon: '🐍' },\r\n    { value: 'react', label: 'React', icon: '⚛️' },\r\n    { value: 'vue', label: 'Vue.js', icon: '💚' },\r\n    { value: 'angular', label: 'Angular', icon: '🅰️' },\r\n    { value: 'nodejs', label: 'Node.js', icon: '🟢' },\r\n    { value: 'php', label: 'PHP', icon: '🐘' },\r\n  ]\r\n\r\n  const popularPrompts = [\r\n    {\r\n      id: '1',\r\n      content: 'Crée un composant React pour un dashboard avec des graphiques interactifs',\r\n      category: 'web',\r\n      language: 'react',\r\n      rating: 4.8,\r\n      usage: 1250\r\n    },\r\n    {\r\n      id: '2',\r\n      content: 'Génère une API REST avec Node.js et Express pour gérer des utilisateurs',\r\n      category: 'web',\r\n      language: 'nodejs',\r\n      rating: 4.7,\r\n      usage: 980\r\n    },\r\n    {\r\n      id: '3',\r\n      content: 'Crée un algorithme de tri rapide en Python avec visualisation',\r\n      category: 'ai',\r\n      language: 'python',\r\n      rating: 4.9,\r\n      usage: 750\r\n    },\r\n    {\r\n      id: '4',\r\n      content: 'Développe une application mobile avec React Native et navigation',\r\n      category: 'mobile',\r\n      language: 'react',\r\n      rating: 4.6,\r\n      usage: 650\r\n    },\r\n  ]\r\n\r\n  useEffect(() => {\r\n    // Charger l'historique des conversations\r\n    const savedHistory = localStorage.getItem('conversationHistory')\r\n    if (savedHistory) {\r\n      setConversationHistory(JSON.parse(savedHistory))\r\n    }\r\n\r\n    // Charger les prompts sauvegardés\r\n    const saved = localStorage.getItem('savedPrompts')\r\n    if (saved) {\r\n      setSavedPrompts(JSON.parse(saved))\r\n    }\r\n  }, [])\r\n\r\n  const sendPrompt = async () => {\r\n    if (!prompt.trim()) return\r\n\r\n    setIsGenerating(true)\r\n\r\n    // Créer une nouvelle conversation si nécessaire\r\n    if (!currentConversation) {\r\n      const newConversation: Conversation = {\r\n        id: Date.now().toString(),\r\n        messages: [],\r\n        timestamp: new Date()\r\n      }\r\n      setCurrentConversation(newConversation)\r\n    }\r\n\r\n    // Ajouter le message utilisateur\r\n    const userMessage = {\r\n      id: Date.now().toString(),\r\n      role: 'user' as const,\r\n      content: prompt,\r\n      timestamp: new Date()\r\n    }\r\n\r\n    const updatedMessages = [...(currentConversation?.messages || []), userMessage]\r\n    setCurrentConversation(prev => prev ? { ...prev, messages: updatedMessages } : null)\r\n\r\n    try {\r\n      // Simulation de génération de réponse (comme sur Rork.com)\r\n      await new Promise(resolve => setTimeout(resolve, 2000))\r\n\r\n      const assistantResponse = generateMockResponse(prompt, selectedCategory, selectedLanguage)\r\n\r\n      const assistantMessage = {\r\n        id: (Date.now() + 1).toString(),\r\n        role: 'assistant' as const,\r\n        content: assistantResponse,\r\n        timestamp: new Date()\r\n      }\r\n\r\n      const finalMessages = [...updatedMessages, assistantMessage]\r\n      const finalConversation = {\r\n        ...currentConversation!,\r\n        messages: finalMessages\r\n      }\r\n\r\n      setCurrentConversation(finalConversation)\r\n      setConversationHistory(prev => [finalConversation, ...prev])\r\n      \r\n      // Sauvegarder dans localStorage\r\n      localStorage.setItem('conversationHistory', JSON.stringify([finalConversation, ...conversationHistory]))\r\n\r\n      setPrompt('')\r\n    } catch (error) {\r\n      console.error('Erreur lors de la génération:', error)\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }\r\n\r\n  const generateMockResponse = (prompt: string, category: string, language: string): string => {\r\n    const responses = {\r\n      general: `Voici une solution pour votre demande \"${prompt}\" :\r\n\r\n\\`\\`\\`${language}\r\n// Code généré par Rork AI Builder\r\nfunction generatedSolution() {\r\n  console.log(\"Solution implémentée avec succès!\");\r\n  \r\n  // Votre logique métier ici\r\n  const result = {\r\n    success: true,\r\n    message: \"Code généré pour: \" + prompt,\r\n    timestamp: new Date().toISOString()\r\n  };\r\n  \r\n  return result;\r\n}\r\n\r\n// Exemple d'utilisation\r\nconst solution = generatedSolution();\r\nconsole.log(solution);\r\n\\`\\`\\`\r\n\r\n**Explication :**\r\n- ✅ Code optimisé et commenté\r\n- 🔧 Fonction réutilisable\r\n- 📝 Documentation incluse\r\n- 🚀 Prêt pour la production\r\n\r\n**Prochaines étapes :**\r\n1. Testez le code dans votre environnement\r\n2. Adaptez selon vos besoins spécifiques\r\n3. Ajoutez la gestion d'erreurs si nécessaire`,\r\n\r\n      web: `Voici une solution web complète pour \"${prompt}\" :\r\n\r\n\\`\\`\\`${language}\r\n// Composant web généré par Rork AI Builder\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst GeneratedComponent = () => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('/api/data');\r\n      const result = await response.json();\r\n      setData(result);\r\n    } catch (error) {\r\n      console.error('Erreur:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"generated-component\">\r\n      {loading ? (\r\n        <div>Chargement...</div>\r\n      ) : (\r\n        <div>\r\n          <h2>Composant généré avec succès!</h2>\r\n          <pre>{JSON.stringify(data, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneratedComponent;\r\n\\`\\`\\`\r\n\r\n**Fonctionnalités incluses :**\r\n- ⚛️ Composant React moderne\r\n- 🔄 Gestion d'état avec hooks\r\n- 🌐 Appels API intégrés\r\n- 🎨 Styling avec Tailwind CSS\r\n- 📱 Design responsive`,\r\n\r\n      ai: `Solution d'IA/ML pour \"${prompt}\" :\r\n\r\n\\`\\`\\`python\r\n# Solution IA générée par Rork AI Builder\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import accuracy_score\r\n\r\nclass GeneratedAIModel:\r\n    def __init__(self):\r\n        self.model = RandomForestClassifier(n_estimators=100)\r\n        self.is_trained = False\r\n    \r\n    def train(self, X, y):\r\n        \"\"\"Entraîne le modèle avec les données fournies\"\"\"\r\n        X_train, X_test, y_train, y_test = train_test_split(\r\n            X, y, test_size=0.2, random_state=42\r\n        )\r\n        \r\n        self.model.fit(X_train, y_train)\r\n        predictions = self.model.predict(X_test)\r\n        accuracy = accuracy_score(y_test, predictions)\r\n        \r\n        self.is_trained = True\r\n        print(f\"Modèle entraîné avec une précision de {accuracy:.2%}\")\r\n        \r\n        return accuracy\r\n    \r\n    def predict(self, X):\r\n        \"\"\"Fait des prédictions avec le modèle entraîné\"\"\"\r\n        if not self.is_trained:\r\n            raise ValueError(\"Le modèle doit être entraîné avant de faire des prédictions\")\r\n        \r\n        return self.model.predict(X)\r\n\r\n# Exemple d'utilisation\r\nmodel = GeneratedAIModel()\r\n# model.train(X_train, y_train)\r\n# predictions = model.predict(X_test)\r\n\\`\\`\\`\r\n\r\n**Fonctionnalités IA :**\r\n- 🤖 Modèle de machine learning\r\n- 📊 Métriques d'évaluation\r\n- 🔧 Interface simple et intuitive\r\n- 📈 Optimisé pour la performance`\r\n    }\r\n\r\n    return responses[category as keyof typeof responses] || responses.general\r\n  }\r\n\r\n  const savePrompt = () => {\r\n    if (!prompt.trim()) return\r\n\r\n    const newPrompt: Prompt = {\r\n      id: Date.now().toString(),\r\n      content: prompt,\r\n      category: selectedCategory,\r\n      language: selectedLanguage,\r\n      timestamp: new Date(),\r\n      rating: 0,\r\n      usage: 0\r\n    }\r\n\r\n    setSavedPrompts(prev => [newPrompt, ...prev])\r\n    localStorage.setItem('savedPrompts', JSON.stringify([newPrompt, ...savedPrompts]))\r\n  }\r\n\r\n  const usePrompt = (promptContent: string) => {\r\n    setPrompt(promptContent)\r\n  }\r\n\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text)\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Zone de prompt principal */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <MessageSquare className=\"h-5 w-5 text-blue-500\" />\r\n            <span>Système de Prompts IA</span>\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Générez du code intelligent avec des prompts avancés (comme sur Rork.com)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {/* Sélection de catégorie et langage */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block\">Catégorie</label>\r\n                <select\r\n                  value={selectedCategory}\r\n                  onChange={(e) => setSelectedCategory(e.target.value)}\r\n                  className=\"w-full px-3 py-2 border rounded-md\"\r\n                >\r\n                  {categories.map((cat) => (\r\n                    <option key={cat.value} value={cat.value}>\r\n                      {cat.icon} {cat.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block\">Langage</label>\r\n                <select\r\n                  value={selectedLanguage}\r\n                  onChange={(e) => setSelectedLanguage(e.target.value)}\r\n                  className=\"w-full px-3 py-2 border rounded-md\"\r\n                >\r\n                  {languages.map((lang) => (\r\n                    <option key={lang.value} value={lang.value}>\r\n                      {lang.icon} {lang.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Zone de texte */}\r\n            <div>\r\n              <Textarea\r\n                placeholder=\"Décrivez le code que vous souhaitez générer... (ex: Crée un composant React pour un dashboard avec des graphiques)\"\r\n                value={prompt}\r\n                onChange={(e) => setPrompt(e.target.value)}\r\n                className=\"min-h-[120px] resize-none\"\r\n              />\r\n            </div>\r\n\r\n            {/* Actions */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Button variant=\"outline\" size=\"sm\" onClick={savePrompt}>\r\n                  <Star className=\"h-4 w-4 mr-1\" />\r\n                  Sauvegarder\r\n                </Button>\r\n              </div>\r\n              <Button \r\n                onClick={sendPrompt} \r\n                disabled={!prompt.trim() || isGenerating}\r\n                className=\"flex items-center space-x-2\"\r\n              >\r\n                {isGenerating ? (\r\n                  <>\r\n                    <Zap className=\"h-4 w-4 animate-spin\" />\r\n                    <span>Génération...</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Send className=\"h-4 w-4\" />\r\n                    <span>Générer</span>\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Prompts populaires */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <TrendingUp className=\"h-5 w-5 text-green-500\" />\r\n            <span>Prompts Populaires</span>\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Prompts les plus utilisés par la communauté\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {popularPrompts.map((prompt) => (\r\n              <div key={prompt.id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\r\n                <div className=\"flex items-start justify-between mb-2\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Badge variant=\"secondary\">\r\n                      {categories.find(c => c.value === prompt.category)?.icon}\r\n                      {categories.find(c => c.value === prompt.category)?.label}\r\n                    </Badge>\r\n                    <Badge variant=\"outline\">\r\n                      {languages.find(l => l.value === prompt.language)?.label}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <Star className=\"h-4 w-4 text-yellow-500\" />\r\n                    <span className=\"text-sm text-gray-600\">{prompt.rating}</span>\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-sm text-gray-700 mb-3\">{prompt.content}</p>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-xs text-gray-500\">\r\n                    <Clock className=\"h-3 w-3 inline mr-1\" />\r\n                    {prompt.usage} utilisations\r\n                  </span>\r\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => usePrompt(prompt.content)}>\r\n                    Utiliser\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Conversation actuelle */}\r\n      {currentConversation && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <History className=\"h-5 w-5 text-purple-500\" />\r\n              <span>Conversation Actuelle</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\r\n              {currentConversation.messages.map((message) => (\r\n                <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\r\n                  <div className={`max-w-[80%] p-3 rounded-lg ${\r\n                    message.role === 'user' \r\n                      ? 'bg-blue-500 text-white' \r\n                      : 'bg-gray-100 dark:bg-gray-800'\r\n                  }`}>\r\n                    <div className=\"flex items-center space-x-2 mb-2\">\r\n                      {message.role === 'user' ? (\r\n                        <User className=\"h-4 w-4\" />\r\n                      ) : (\r\n                        <Bot className=\"h-4 w-4\" />\r\n                      )}\r\n                      <span className=\"text-xs opacity-70\">\r\n                        {message.timestamp.toLocaleTimeString()}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"whitespace-pre-wrap text-sm\">\r\n                      {message.content}\r\n                    </div>\r\n                    {message.role === 'assistant' && (\r\n                      <div className=\"flex items-center space-x-2 mt-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\r\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => copyToClipboard(message.content)}>\r\n                          <Copy className=\"h-3 w-3 mr-1\" />\r\n                          Copier\r\n                        </Button>\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <ThumbsUp className=\"h-3 w-3\" />\r\n                        </Button>\r\n                        <Button size=\"sm\" variant=\"outline\">\r\n                          <Share2 className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Prompts sauvegardés */}\r\n      {savedPrompts.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Star className=\"h-5 w-5 text-yellow-500\" />\r\n              <span>Mes Prompts Sauvegardés</span>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {savedPrompts.slice(0, 5).map((savedPrompt) => (\r\n                <div key={savedPrompt.id} className=\"border rounded-lg p-3\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge variant=\"secondary\">\r\n                        {categories.find(c => c.value === savedPrompt.category)?.label}\r\n                      </Badge>\r\n                      <Badge variant=\"outline\">\r\n                        {languages.find(l => l.value === savedPrompt.language)?.label}\r\n                      </Badge>\r\n                    </div>\r\n                    <span className=\"text-xs text-gray-500\">\r\n                      {savedPrompt.timestamp.toLocaleDateString()}\r\n                    </span>\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-700 mb-2\">{savedPrompt.content}</p>\r\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => usePrompt(savedPrompt.content)}>\r\n                    Réutiliser\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,155],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nInput.displayName = \"Input\"\r\n\r\nexport { Input }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,164],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface TextareaProps\r\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <textarea\r\n        className={cn(\r\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nTextarea.displayName = \"Textarea\"\r\n\r\nexport { Textarea }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\__tests__\\validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\clerk-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\code-execution.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CodeExecutionSchema' is assigned a value but only used as a type.","line":5,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'framework' is assigned a value but never used.","line":17,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":43},{"ruleId":"prefer-const","severity":2,"message":"'fullHTML' is never reassigned. Use 'const' instead.","line":19,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":19,"endColumn":15,"fix":{"range":[617,1032],"text":"const fullHTML = `<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Application Générée</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <style>\r\n        ${css || ''}\r\n    </style>\r\n</head>\r\n<body>\r\n    ${html}\r\n    ${javascript ? `<script>${javascript}</script>` : ''}\r\n</body>\r\n</html>`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Code execution utilities for preview and testing\r\nimport { z } from 'zod'\r\n\r\n// Schema pour valider le code d'entrée\r\nconst CodeExecutionSchema = z.object({\r\n  html: z.string(),\r\n  css: z.string().optional(),\r\n  javascript: z.string().optional(),\r\n  framework: z.enum(['react', 'vue', 'vanilla', 'nextjs', 'svelte']),\r\n  dependencies: z.array(z.string()).optional(),\r\n})\r\n\r\nexport type CodeExecution = z.infer<typeof CodeExecutionSchema>\r\n\r\n// Fonction pour créer un HTML complet avec le code\r\nexport function createFullHTML(code: CodeExecution): string {\r\n  const { html, css, javascript, framework } = code\r\n\r\n  let fullHTML = `<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Application Générée</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <style>\r\n        ${css || ''}\r\n    </style>\r\n</head>\r\n<body>\r\n    ${html}\r\n    ${javascript ? `<script>${javascript}</script>` : ''}\r\n</body>\r\n</html>`\r\n\r\n  return fullHTML\r\n}\r\n\r\n// Fonction pour créer un package.json pour les frameworks\r\nexport function createPackageJson(\r\n  framework: string,\r\n  dependencies: string[] = []\r\n): string {\r\n  const baseDeps = {\r\n    react: {\r\n      'react': '^18.2.0',\r\n      'react-dom': '^18.2.0',\r\n    },\r\n    vue: {\r\n      'vue': '^3.3.0',\r\n    },\r\n    nextjs: {\r\n      'next': '^14.0.0',\r\n      'react': '^18.2.0',\r\n      'react-dom': '^18.2.0',\r\n    },\r\n    svelte: {\r\n      'svelte': '^4.0.0',\r\n    },\r\n    vanilla: {},\r\n  }\r\n\r\n  const frameworkDeps = baseDeps[framework as keyof typeof baseDeps] || {}\r\n  const customDeps = dependencies.reduce((acc, dep) => {\r\n    acc[dep] = 'latest'\r\n    return acc\r\n  }, {} as Record<string, string>)\r\n\r\n  const packageJson = {\r\n    name: 'generated-app',\r\n    version: '1.0.0',\r\n    description: 'Application générée avec Rork AI Builder',\r\n    main: 'index.js',\r\n    scripts: {\r\n      dev: framework === 'nextjs' ? 'next dev' : 'vite',\r\n      build: framework === 'nextjs' ? 'next build' : 'vite build',\r\n      start: framework === 'nextjs' ? 'next start' : 'vite preview',\r\n    },\r\n    dependencies: {\r\n      ...frameworkDeps,\r\n      ...customDeps,\r\n    },\r\n    devDependencies: {\r\n      '@types/react': '^18.2.0',\r\n      '@types/react-dom': '^18.2.0',\r\n      'typescript': '^5.0.0',\r\n      'vite': '^4.4.0',\r\n    },\r\n  }\r\n\r\n  return JSON.stringify(packageJson, null, 2)\r\n}\r\n\r\n// Fonction pour créer un fichier de configuration Vite\r\nexport function createViteConfig(framework: string): string {\r\n  if (framework === 'nextjs') {\r\n    return `/** @type {import('next').NextConfig} */\r\nconst nextConfig = {\r\n  experimental: {\r\n    appDir: true,\r\n  },\r\n}\r\n\r\nmodule.exports = nextConfig`\r\n  }\r\n\r\n  return `import { defineConfig } from 'vite'\r\nimport react from '@vitejs/plugin-react'\r\nimport vue from '@vitejs/plugin-vue'\r\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\r\n\r\nexport default defineConfig({\r\n  plugins: [\r\n    ${framework === 'react' ? 'react()' : ''}\r\n    ${framework === 'vue' ? 'vue()' : ''}\r\n    ${framework === 'svelte' ? 'svelte()' : ''}\r\n  ],\r\n  server: {\r\n    port: 3000,\r\n  },\r\n})`\r\n}\r\n\r\n// Fonction pour valider le code avant exécution\r\nexport function validateCode(code: string, type: 'html' | 'css' | 'javascript'): {\r\n  isValid: boolean\r\n  errors: string[]\r\n} {\r\n  const errors: string[] = []\r\n\r\n  try {\r\n    switch (type) {\r\n      case 'html':\r\n        // Validation HTML basique\r\n        if (!code.includes('<html') && !code.includes('<div') && !code.includes('<body')) {\r\n          errors.push('Le code HTML semble incomplet')\r\n        }\r\n        break\r\n\r\n      case 'css':\r\n        // Validation CSS basique\r\n        if (code && !code.includes('{') && !code.includes('}')) {\r\n          errors.push('Le code CSS semble mal formaté')\r\n        }\r\n        break\r\n\r\n      case 'javascript':\r\n        // Validation JavaScript basique\r\n        if (code) {\r\n          try {\r\n            new Function(code)\r\n          } catch (e) {\r\n            errors.push(`Erreur JavaScript: ${e}`)\r\n          }\r\n        }\r\n        break\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isValid: false,\r\n      errors: [`Erreur de validation: ${error}`],\r\n    }\r\n  }\r\n}\r\n\r\n// Fonction pour extraire les métadonnées du code\r\nexport function extractCodeMetadata(code: CodeExecution): {\r\n  title: string\r\n  description: string\r\n  tags: string[]\r\n  complexity: 'simple' | 'medium' | 'complex'\r\n} {\r\n  const html = code.html.toLowerCase()\r\n  \r\n  // Détecter la complexité\r\n  let complexity: 'simple' | 'medium' | 'complex' = 'simple'\r\n  if (html.includes('api') || html.includes('fetch') || html.includes('async')) {\r\n    complexity = 'complex'\r\n  } else if (html.includes('function') || html.includes('event') || html.includes('state')) {\r\n    complexity = 'medium'\r\n  }\r\n\r\n  // Extraire le titre\r\n  const titleMatch = code.html.match(/<title>(.*?)<\\/title>/i)\r\n  const title = titleMatch ? titleMatch[1] : 'Application Générée'\r\n\r\n  // Extraire la description\r\n  const descriptionMatch = code.html.match(/<meta name=\"description\" content=\"(.*?)\"/i)\r\n  const description = descriptionMatch ? descriptionMatch[1] : 'Application générée avec Rork AI Builder'\r\n\r\n  // Générer des tags basés sur le contenu\r\n  const tags: string[] = []\r\n  if (html.includes('dashboard') || html.includes('admin')) tags.push('dashboard')\r\n  if (html.includes('landing') || html.includes('hero')) tags.push('landing-page')\r\n  if (html.includes('portfolio') || html.includes('projet')) tags.push('portfolio')\r\n  if (html.includes('ecommerce') || html.includes('shop')) tags.push('ecommerce')\r\n  if (html.includes('blog') || html.includes('article')) tags.push('blog')\r\n  if (html.includes('responsive') || html.includes('mobile')) tags.push('responsive')\r\n\r\n  return {\r\n    title,\r\n    description,\r\n    tags,\r\n    complexity,\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":5,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[191,194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[191,194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[231,234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[231,234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[373,376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[373,376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[483,486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[483,486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[625,628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[625,628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[932,935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[932,935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1104,1107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1104,1107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Configuration de base de données simple pour éviter les erreurs d'import\r\nexport const prisma = {\r\n  // Mock Prisma client pour éviter les erreurs\r\n  user: {\r\n    findUnique: async (args: any) => null,\r\n    create: async (args: any) => ({ id: 'mock-id', ...args.data }),\r\n    update: async (args: any) => ({ id: args.where.id, ...args.data }),\r\n    delete: async (args: any) => ({ id: args.where.id }),\r\n  },\r\n  project: {\r\n    findMany: async () => [],\r\n    create: async (args: any) => ({ id: 'mock-id', ...args.data }),\r\n    update: async (args: any) => ({ id: args.where.id, ...args.data }),\r\n    delete: async (args: any) => ({ id: args.where.id }),\r\n  },\r\n  generation: {\r\n    findMany: async () => [],\r\n    create: async (args: any) => ({ id: 'mock-id', ...args.data }),\r\n  },\r\n}\r\n\r\n// Fonctions helper pour éviter les erreurs d'import\r\nexport const getProjects = async () => []\r\nexport const createProject = async (data: any) => ({ id: 'mock-id', ...data })\r\nexport const getProject = async (id: string) => ({ id, name: 'Mock Project' })\r\nexport const updateProject = async (id: string, data: any) => ({ id, ...data })\r\nexport const deleteProject = async (id: string) => ({ id })","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\payments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\src\\lib\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\tests\\e2e\\ai-builder.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lecoa\\Downloads\\dyad\\rork-ai-builder\\tests\\e2e\\basic.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]