import { test, expect } from '@playwright/test'

test.describe('ü§ñ Rork AI Builder - Tests E2E', () => {
  
  test.beforeEach(async ({ page }) => {
    // Naviguer vers la page d'accueil
    await page.goto('/')
  })

  test('devrait afficher la page d\'accueil pour les utilisateurs non connect√©s', async ({ page }) => {
    // V√©rifier que la page d'accueil s'affiche
    await expect(page).toHaveTitle(/Rork AI Builder/)
    
    // V√©rifier les √©l√©ments principaux
    await expect(page.locator('h1')).toContainText('Cr√©ez des applications IA')
    await expect(page.getByText('Commencer gratuitement')).toBeVisible()
    await expect(page.getByText('Enterprise Edition')).toBeVisible()
  })

  test('devrait permettre la navigation vers la connexion', async ({ page }) => {
    // Cliquer sur le bouton de connexion
    await page.getByText('Se connecter').first().click()
    
    // V√©rifier que la modal de connexion s'ouvre
    await expect(page.locator('[data-testid="clerk-modal"]')).toBeVisible()
  })

  test('devrait afficher le dashboard pour les utilisateurs connect√©s', async ({ page }) => {
    // Simuler une connexion utilisateur (mock)
    await page.evaluate(() => {
      // Mock Clerk pour simuler un utilisateur connect√©
      window.localStorage.setItem('clerk-session', 'mock-session')
    })
    
    // Recharger la page
    await page.reload()
    
    // V√©rifier que le dashboard s'affiche
    await expect(page.getByText('Dashboard Rork AI Builder')).toBeVisible()
    await expect(page.getByText('G√©n√©rateur IA')).toBeVisible()
    await expect(page.getByText('Dashboard')).toBeVisible()
  })

  test('devrait permettre de g√©n√©rer du code avec l\'IA', async ({ page }) => {
    // Naviguer vers l'onglet g√©n√©rateur
    await page.getByText('G√©n√©rateur IA').click()
    
    // Remplir le formulaire de g√©n√©ration
    const promptTextarea = page.locator('textarea[placeholder*="D√©crivez votre application"]')
    await promptTextarea.fill('Cr√©ez une page d\'accueil moderne pour une startup tech')
    
    // Cliquer sur le bouton de g√©n√©ration
    await page.getByText('G√©n√©rer le Code').click()
    
    // V√©rifier que le code g√©n√©r√© s'affiche
    await expect(page.getByText('Code G√©n√©r√©')).toBeVisible()
    await expect(page.locator('pre')).toBeVisible()
  })

  test('devrait afficher les m√©triques du dashboard', async ({ page }) => {
    // Naviguer vers l'onglet dashboard
    await page.getByText('Dashboard').click()
    
    // V√©rifier que les m√©triques s'affichent
    await expect(page.getByText('Projets')).toBeVisible()
    await expect(page.getByText('G√©n√©rations')).toBeVisible()
    await expect(page.getByText('Utilisateurs')).toBeVisible()
    await expect(page.getByText('Revenus')).toBeVisible()
  })

  test('devrait √™tre responsive sur mobile', async ({ page }) => {
    // Changer la taille de l'√©cran pour mobile
    await page.setViewportSize({ width: 375, height: 667 })
    
    // V√©rifier que la navigation mobile fonctionne
    await expect(page.locator('header')).toBeVisible()
    
    // V√©rifier que le contenu s'adapte
    await expect(page.getByText('Rork AI Builder')).toBeVisible()
  })

  test('devrait g√©rer les erreurs API gracieusement', async ({ page }) => {
    // Intercepter les requ√™tes API et simuler une erreur
    await page.route('**/api/generate', route => {
      route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({ error: 'Internal Server Error' })
      })
    })
    
    // Essayer de g√©n√©rer du code
    await page.getByText('G√©n√©rateur IA').click()
    await page.locator('textarea').fill('Test prompt')
    await page.getByText('G√©n√©rer le Code').click()
    
    // V√©rifier que l'erreur est g√©r√©e
    await expect(page.getByText(/erreur/i)).toBeVisible()
  })

  test('devrait permettre la copie du code g√©n√©r√©', async ({ page }) => {
    // G√©n√©rer du code
    await page.getByText('G√©n√©rateur IA').click()
    await page.locator('textarea').fill('Cr√©ez une application simple')
    await page.getByText('G√©n√©rer le Code').click()
    
    // Attendre que le code soit g√©n√©r√©
    await expect(page.getByText('Code G√©n√©r√©')).toBeVisible()
    
    // Cliquer sur le bouton copier
    await page.getByText('Copier').click()
    
    // V√©rifier que le code est copi√© (simulation)
    const clipboardText = await page.evaluate(() => navigator.clipboard.readText())
    expect(clipboardText).toBeTruthy()
  })

  test('devrait afficher les projets r√©cents', async ({ page }) => {
    // Naviguer vers le dashboard
    await page.getByText('Dashboard').click()
    
    // V√©rifier que la section projets r√©cents s'affiche
    await expect(page.getByText('Projets R√©cents')).toBeVisible()
    
    // V√©rifier qu'il y a des projets list√©s
    const projects = page.locator('[data-testid="project-item"]')
    await expect(projects).toHaveCount.greaterThan(0)
  })

  test('devrait permettre la navigation entre les onglets', async ({ page }) => {
    // V√©rifier que l'onglet g√©n√©rateur est actif par d√©faut
    await expect(page.getByText('G√©n√©rateur IA')).toHaveClass(/active/)
    
    // Cliquer sur l'onglet dashboard
    await page.getByText('Dashboard').click()
    
    // V√©rifier que l'onglet dashboard est maintenant actif
    await expect(page.getByText('Dashboard')).toHaveClass(/active/)
    
    // V√©rifier que le contenu du dashboard s'affiche
    await expect(page.getByText('Sant√© du Syst√®me')).toBeVisible()
  })

  test('devrait respecter le th√®me sombre/clair', async ({ page }) => {
    // V√©rifier que le th√®me clair est appliqu√© par d√©faut
    const body = page.locator('body')
    await expect(body).toHaveClass(/light/)
    
    // Simuler le changement de th√®me (si impl√©ment√©)
    // await page.getByTestId('theme-toggle').click()
    // await expect(body).toHaveClass(/dark/)
  })
})
